{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://gemma-notebook/./src/editor/BlockFactory.ts","webpack://gemma-notebook/./src/editor/BlockRenderer.ts","webpack://gemma-notebook/./src/editor/InlineSuggestion.ts","webpack://gemma-notebook/./src/editor/DragAndDrop.ts","webpack://gemma-notebook/./src/editor/Editor.ts","webpack://gemma-notebook/./src/storage/FileStorage.ts","webpack://gemma-notebook/./src/ai/GemmaService.ts","webpack://gemma-notebook/./src/chat/ChatInterface.ts","webpack://gemma-notebook/./src/features/AutoSave.ts","webpack://gemma-notebook/./src/references/ReferenceManager.ts","webpack://gemma-notebook/./src/references/ReferenceUI.ts","webpack://gemma-notebook/./src/index.ts"],"sourcesContent":["export class BlockFactory {\n    createBlock(id, type, content = '', metadata = {}) {\n        const now = new Date();\n        return {\n            id,\n            type,\n            content,\n            metadata: this.getDefaultMetadata(type, metadata),\n            createdAt: now,\n            updatedAt: now\n        };\n    }\n    getDefaultMetadata(type, metadata) {\n        const defaults = {\n            'paragraph': {},\n            'heading-1': { level: 1 },\n            'heading-2': { level: 2 },\n            'heading-3': { level: 3 },\n            'heading-4': { level: 4 },\n            'heading-5': { level: 5 },\n            'heading-6': { level: 6 },\n            'quote': {},\n            'code': { language: 'text' },\n            'bullet-list': { level: 0 },\n            'numbered-list': { level: 0, number: 1 },\n            'checklist': { checked: false, level: 0 },\n            'horizontal-rule': {},\n            'image': { src: '', alt: '', width: 600, caption: '' }\n        };\n        return { ...defaults[type], ...metadata };\n    }\n    static isTextBlock(type) {\n        return [\n            'paragraph',\n            'heading-1',\n            'heading-2',\n            'heading-3',\n            'heading-4',\n            'heading-5',\n            'heading-6',\n            'quote',\n            'code'\n        ].includes(type);\n    }\n    static isListBlock(type) {\n        return ['bullet-list', 'numbered-list', 'checklist'].includes(type);\n    }\n    static isHeadingBlock(type) {\n        return type.startsWith('heading-');\n    }\n    static getHeadingLevel(type) {\n        if (!this.isHeadingBlock(type))\n            return 0;\n        return parseInt(type.split('-')[1]) || 1;\n    }\n}\n","export class BlockRenderer {\n    render(block) {\n        const blockElement = document.createElement('div');\n        blockElement.className = 'block';\n        blockElement.dataset.blockId = block.id;\n        blockElement.dataset.blockType = block.type;\n        blockElement.draggable = false; // We'll handle drag manually\n        // Add drag indicators\n        const topIndicator = document.createElement('div');\n        topIndicator.className = 'drag-indicator top';\n        blockElement.appendChild(topIndicator);\n        const bottomIndicator = document.createElement('div');\n        bottomIndicator.className = 'drag-indicator bottom';\n        blockElement.appendChild(bottomIndicator);\n        // Add block menu\n        const menu = this.createBlockMenu(block);\n        blockElement.appendChild(menu);\n        // Add block type indicator\n        const typeIndicator = document.createElement('div');\n        typeIndicator.className = 'block-type-indicator';\n        typeIndicator.textContent = this.getBlockTypeLabel(block.type);\n        blockElement.appendChild(typeIndicator);\n        // Add drag handle\n        const dragHandle = document.createElement('div');\n        dragHandle.className = 'block-handle';\n        dragHandle.innerHTML = '⋮⋮';\n        dragHandle.title = 'Click and drag to move';\n        blockElement.appendChild(dragHandle);\n        // Create content element based on block type\n        const contentElement = this.createContentElement(block);\n        blockElement.appendChild(contentElement);\n        return blockElement;\n    }\n    createBlockMenu(block) {\n        const menu = document.createElement('div');\n        menu.className = 'block-menu';\n        const addButton = document.createElement('button');\n        addButton.className = 'menu-button add-button';\n        addButton.innerHTML = '+';\n        addButton.title = 'Add block below';\n        menu.appendChild(addButton);\n        return menu;\n    }\n    createContentElement(block) {\n        switch (block.type) {\n            case 'paragraph':\n                return this.createParagraphElement(block);\n            case 'heading-1':\n            case 'heading-2':\n            case 'heading-3':\n            case 'heading-4':\n            case 'heading-5':\n            case 'heading-6':\n                return this.createHeadingElement(block);\n            case 'quote':\n                return this.createQuoteElement(block);\n            case 'code':\n                return this.createCodeElement(block);\n            case 'bullet-list':\n                return this.createBulletListElement(block);\n            case 'numbered-list':\n                return this.createNumberedListElement(block);\n            case 'checklist':\n                return this.createChecklistElement(block);\n            case 'horizontal-rule':\n                return this.createHorizontalRuleElement(block);\n            case 'image':\n                return this.createImageElement(block);\n            default:\n                return this.createParagraphElement(block);\n        }\n    }\n    createParagraphElement(block) {\n        const element = document.createElement('div');\n        element.className = 'block-content';\n        element.contentEditable = 'true';\n        element.textContent = block.content;\n        element.setAttribute('data-placeholder', 'Type \\'/\\' for commands, or just start writing...');\n        return element;\n    }\n    createHeadingElement(block) {\n        const level = parseInt(block.type.split('-')[1]) || 1;\n        const element = document.createElement(`h${level}`);\n        element.className = `block-content heading-${level}`;\n        element.contentEditable = 'true';\n        element.textContent = block.content;\n        element.setAttribute('data-placeholder', `Heading ${level}`);\n        return element;\n    }\n    createQuoteElement(block) {\n        const element = document.createElement('blockquote');\n        element.className = 'block-content quote';\n        element.contentEditable = 'true';\n        element.textContent = block.content;\n        element.setAttribute('data-placeholder', 'Empty quote');\n        return element;\n    }\n    createCodeElement(block) {\n        const wrapper = document.createElement('div');\n        wrapper.className = 'code-block';\n        const languageSelect = document.createElement('select');\n        languageSelect.className = 'language-select';\n        languageSelect.style.cssText = 'margin-bottom: 8px; padding: 4px; border: 1px solid #ddd; border-radius: 4px;';\n        const languages = ['text', 'javascript', 'typescript', 'python', 'java', 'html', 'css', 'json', 'markdown'];\n        languages.forEach(lang => {\n            const option = document.createElement('option');\n            option.value = lang;\n            option.textContent = lang;\n            option.selected = lang === (block.metadata?.language || 'text');\n            languageSelect.appendChild(option);\n        });\n        const codeElement = document.createElement('pre');\n        const code = document.createElement('code');\n        code.className = 'block-content';\n        code.contentEditable = 'true';\n        code.textContent = block.content;\n        code.style.cssText = 'outline: none; background: transparent;';\n        code.setAttribute('data-placeholder', 'Enter code...');\n        codeElement.appendChild(code);\n        wrapper.appendChild(languageSelect);\n        wrapper.appendChild(codeElement);\n        // Update language metadata when changed\n        languageSelect.addEventListener('change', () => {\n            block.metadata = { ...block.metadata, language: languageSelect.value };\n        });\n        return wrapper;\n    }\n    createBulletListElement(block) {\n        const wrapper = document.createElement('div');\n        wrapper.className = 'list-item';\n        const marker = document.createElement('span');\n        marker.className = 'list-marker';\n        marker.textContent = '•';\n        const content = document.createElement('div');\n        content.className = 'block-content';\n        content.contentEditable = 'true';\n        content.textContent = block.content;\n        wrapper.appendChild(marker);\n        wrapper.appendChild(content);\n        return wrapper;\n    }\n    createNumberedListElement(block) {\n        const wrapper = document.createElement('div');\n        wrapper.className = 'list-item';\n        const marker = document.createElement('span');\n        marker.className = 'list-marker';\n        marker.textContent = `${block.metadata?.number || 1}.`;\n        const content = document.createElement('div');\n        content.className = 'block-content';\n        content.contentEditable = 'true';\n        content.textContent = block.content;\n        wrapper.appendChild(marker);\n        wrapper.appendChild(content);\n        return wrapper;\n    }\n    createChecklistElement(block) {\n        const wrapper = document.createElement('div');\n        wrapper.className = 'list-item checklist-item';\n        const checkbox = document.createElement('input');\n        checkbox.type = 'checkbox';\n        checkbox.checked = block.metadata?.checked || false;\n        const content = document.createElement('div');\n        content.className = 'block-content';\n        content.contentEditable = 'true';\n        content.textContent = block.content;\n        // Update checked state\n        checkbox.addEventListener('change', () => {\n            block.metadata = { ...block.metadata, checked: checkbox.checked };\n            if (checkbox.checked) {\n                content.style.textDecoration = 'line-through';\n                content.style.color = '#888';\n            }\n            else {\n                content.style.textDecoration = 'none';\n                content.style.color = 'inherit';\n            }\n        });\n        // Apply initial style\n        if (checkbox.checked) {\n            content.style.textDecoration = 'line-through';\n            content.style.color = '#888';\n        }\n        wrapper.appendChild(checkbox);\n        wrapper.appendChild(content);\n        return wrapper;\n    }\n    createHorizontalRuleElement(block) {\n        const hr = document.createElement('hr');\n        hr.className = 'horizontal-rule';\n        return hr;\n    }\n    createImageElement(block) {\n        const wrapper = document.createElement('div');\n        wrapper.className = 'image-block';\n        const imageContainer = document.createElement('div');\n        imageContainer.className = 'image-container';\n        if (block.metadata?.src) {\n            // Display existing image\n            const img = document.createElement('img');\n            img.src = block.metadata.src;\n            img.alt = block.metadata.alt || '';\n            img.className = 'block-image';\n            img.draggable = false;\n            if (block.metadata.width) {\n                img.style.width = `${block.metadata.width}px`;\n            }\n            imageContainer.appendChild(img);\n            // Add resize handles\n            const resizeHandle = document.createElement('div');\n            resizeHandle.className = 'image-resize-handle';\n            resizeHandle.innerHTML = '↘';\n            imageContainer.appendChild(resizeHandle);\n            // Add caption\n            const caption = document.createElement('div');\n            caption.className = 'image-caption block-content';\n            caption.contentEditable = 'true';\n            caption.textContent = block.metadata.caption || '';\n            caption.setAttribute('data-placeholder', 'Add a caption...');\n            wrapper.appendChild(imageContainer);\n            wrapper.appendChild(caption);\n            // Setup resize functionality\n            this.setupImageResize(img, resizeHandle, block);\n        }\n        else {\n            // Show upload area\n            const uploadArea = document.createElement('div');\n            uploadArea.className = 'image-upload-area';\n            uploadArea.innerHTML = `\n        <div class=\"upload-placeholder\">\n          <div class=\"upload-icon\">📁</div>\n          <div class=\"upload-text\">Click to upload or drag an image here</div>\n          <div class=\"upload-formats\">Supports JPG, PNG, GIF, WebP</div>\n        </div>\n      `;\n            // Add file input\n            const fileInput = document.createElement('input');\n            fileInput.type = 'file';\n            fileInput.accept = 'image/*';\n            fileInput.style.display = 'none';\n            uploadArea.appendChild(fileInput);\n            imageContainer.appendChild(uploadArea);\n            wrapper.appendChild(imageContainer);\n            // Setup upload functionality\n            this.setupImageUpload(uploadArea, fileInput, block);\n        }\n        return wrapper;\n    }\n    getBlockTypeLabel(type) {\n        switch (type) {\n            case 'paragraph': return '';\n            case 'heading-1': return 'H1';\n            case 'heading-2': return 'H2';\n            case 'heading-3': return 'H3';\n            case 'heading-4': return 'H4';\n            case 'heading-5': return 'H5';\n            case 'heading-6': return 'H6';\n            case 'quote': return 'QUOTE';\n            case 'code': return 'CODE';\n            case 'bullet-list': return 'LIST';\n            case 'numbered-list': return 'NUM';\n            case 'checklist': return 'TODO';\n            case 'horizontal-rule': return 'HR';\n            case 'image': return 'IMG';\n            default: return '';\n        }\n    }\n    setupImageUpload(uploadArea, fileInput, block) {\n        const handleFile = (file) => {\n            if (!file.type.startsWith('image/')) {\n                alert('Please select an image file.');\n                return;\n            }\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                const result = e.target?.result;\n                // Update block metadata with image data\n                block.metadata = {\n                    ...block.metadata,\n                    src: result,\n                    alt: file.name,\n                    width: 600, // Default width\n                    file: file\n                };\n                // Trigger a re-render by dispatching an event\n                const event = new CustomEvent('imageUploaded', {\n                    detail: { blockId: block.id, imageData: result }\n                });\n                window.dispatchEvent(event);\n            };\n            reader.readAsDataURL(file);\n        };\n        // Click to upload\n        uploadArea.addEventListener('click', () => {\n            fileInput.click();\n        });\n        fileInput.addEventListener('change', (e) => {\n            const file = e.target.files?.[0];\n            if (file) {\n                handleFile(file);\n            }\n        });\n        // Drag and drop\n        uploadArea.addEventListener('dragover', (e) => {\n            e.preventDefault();\n            uploadArea.classList.add('drag-over');\n        });\n        uploadArea.addEventListener('dragleave', () => {\n            uploadArea.classList.remove('drag-over');\n        });\n        uploadArea.addEventListener('drop', (e) => {\n            e.preventDefault();\n            uploadArea.classList.remove('drag-over');\n            const files = e.dataTransfer?.files;\n            if (files && files.length > 0) {\n                handleFile(files[0]);\n            }\n        });\n    }\n    setupImageResize(img, resizeHandle, block) {\n        let isResizing = false;\n        let startX = 0;\n        let startWidth = 0;\n        resizeHandle.addEventListener('mousedown', (e) => {\n            e.preventDefault();\n            isResizing = true;\n            startX = e.clientX;\n            startWidth = img.offsetWidth;\n            document.body.style.cursor = 'nw-resize';\n            document.body.style.userSelect = 'none';\n        });\n        document.addEventListener('mousemove', (e) => {\n            if (!isResizing)\n                return;\n            const deltaX = e.clientX - startX;\n            const newWidth = Math.max(100, Math.min(800, startWidth + deltaX));\n            img.style.width = `${newWidth}px`;\n            // Update block metadata\n            if (block.metadata) {\n                block.metadata.width = newWidth;\n            }\n        });\n        document.addEventListener('mouseup', () => {\n            if (isResizing) {\n                isResizing = false;\n                document.body.style.cursor = '';\n                document.body.style.userSelect = '';\n            }\n        });\n    }\n    static applyTextFormatting(element, content) {\n        // Apply inline formatting like **bold**, *italic*, ~~strikethrough~~, `code`\n        let formattedContent = content;\n        // Bold formatting\n        formattedContent = formattedContent.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n        // Italic formatting\n        formattedContent = formattedContent.replace(/\\*(.*?)\\*/g, '<em>$1</em>');\n        // Strikethrough formatting\n        formattedContent = formattedContent.replace(/~~(.*?)~~/g, '<del>$1</del>');\n        // Inline code formatting\n        formattedContent = formattedContent.replace(/`(.*?)`/g, '<code style=\"background: #f0f0f0; padding: 2px 4px; border-radius: 3px; font-family: monospace;\">$1</code>');\n        // Link formatting\n        formattedContent = formattedContent.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>');\n        if (formattedContent !== content) {\n            element.innerHTML = formattedContent;\n        }\n    }\n}\n","export class InlineSuggestion {\n    constructor(gemmaService, referenceManager) {\n        this.currentSuggestion = null;\n        this.suggestionTimeout = null;\n        this.isGenerating = false;\n        this.SUGGESTION_DELAY = 800; // ms to wait after typing stops\n        this.gemmaService = gemmaService;\n        this.referenceManager = referenceManager;\n    }\n    async requestSuggestion(blockId, blockElement, currentText, documentContext) {\n        // Clear any existing suggestion\n        this.clearSuggestion();\n        // Clear existing timeout\n        if (this.suggestionTimeout) {\n            clearTimeout(this.suggestionTimeout);\n        }\n        // Don't generate if already generating or text is too short\n        if (this.isGenerating || currentText.trim().length < 3) {\n            return;\n        }\n        // Set timeout to generate suggestion after user stops typing\n        this.suggestionTimeout = setTimeout(async () => {\n            await this.generateSuggestion(blockId, blockElement, currentText, documentContext);\n        }, this.SUGGESTION_DELAY);\n    }\n    async generateSuggestion(blockId, blockElement, currentText, documentContext) {\n        if (this.isGenerating)\n            return;\n        try {\n            this.isGenerating = true;\n            // Get reference context if available\n            const contextKeywords = this.extractKeywords(currentText + ' ' + documentContext);\n            const referenceContext = this.referenceManager.getRelevantContent(contextKeywords, 1000);\n            // Generate suggestion using AI with reference context\n            const suggestion = await this.gemmaService.generateCompletion(currentText, documentContext, referenceContext);\n            if (suggestion && suggestion.trim() && suggestion !== currentText) {\n                // Clean up the suggestion (remove any duplicate text)\n                const cleanSuggestion = this.cleanSuggestion(currentText, suggestion);\n                if (cleanSuggestion) {\n                    this.showInlineSuggestion(blockId, blockElement, currentText, cleanSuggestion);\n                }\n            }\n        }\n        catch (error) {\n            console.error('Failed to generate inline suggestion:', error);\n        }\n        finally {\n            this.isGenerating = false;\n        }\n    }\n    cleanSuggestion(currentText, rawSuggestion) {\n        let suggestion = rawSuggestion.trim();\n        // Remove any text that duplicates the current text\n        if (suggestion.startsWith(currentText)) {\n            suggestion = suggestion.substring(currentText.length).trim();\n        }\n        // Limit suggestion length to be reasonable\n        const words = suggestion.split(' ');\n        if (words.length > 10) {\n            suggestion = words.slice(0, 10).join(' ') + '...';\n        }\n        // Only show if there's meaningful content\n        return suggestion.length > 2 ? suggestion : '';\n    }\n    showInlineSuggestion(blockId, blockElement, originalText, suggestion) {\n        // Clear any existing suggestion\n        this.clearSuggestion();\n        // Create suggestion element\n        const suggestionElement = this.createSuggestionElement(suggestion);\n        // Find the content element within the block\n        const contentElement = blockElement.querySelector('.block-content');\n        if (!contentElement)\n            return;\n        // Position the suggestion element\n        this.positionSuggestionElement(contentElement, suggestionElement);\n        // Store suggestion state\n        this.currentSuggestion = {\n            blockId,\n            suggestion,\n            originalText,\n            isActive: true,\n            element: suggestionElement\n        };\n        // Show subtle animation\n        suggestionElement.style.opacity = '0';\n        document.body.appendChild(suggestionElement);\n        requestAnimationFrame(() => {\n            suggestionElement.style.transition = 'opacity 0.2s ease';\n            suggestionElement.style.opacity = '0.5';\n        });\n    }\n    createSuggestionElement(suggestion) {\n        const element = document.createElement('span');\n        element.className = 'inline-suggestion';\n        element.textContent = suggestion;\n        element.style.cssText = `\n      position: absolute;\n      color: #999;\n      font-family: inherit;\n      font-size: inherit;\n      line-height: inherit;\n      pointer-events: none;\n      white-space: pre-wrap;\n      z-index: 100;\n      opacity: 0.5;\n      font-style: italic;\n    `;\n        return element;\n    }\n    positionSuggestionElement(contentElement, suggestionElement) {\n        const selection = window.getSelection();\n        if (!selection || selection.rangeCount === 0)\n            return;\n        const range = selection.getRangeAt(0);\n        const rect = range.getBoundingClientRect();\n        const contentRect = contentElement.getBoundingClientRect();\n        // Position suggestion right after the cursor\n        suggestionElement.style.left = `${rect.left}px`;\n        suggestionElement.style.top = `${rect.top}px`;\n    }\n    acceptSuggestion() {\n        if (!this.currentSuggestion || !this.currentSuggestion.isActive) {\n            return false;\n        }\n        const { blockId, suggestion, originalText } = this.currentSuggestion;\n        const newText = originalText + suggestion.replace(/\\.\\.\\.$/, ''); // Remove trailing dots if present\n        // Clear the suggestion\n        this.clearSuggestion();\n        // Dispatch event to update the block content\n        const event = new CustomEvent('acceptSuggestion', {\n            detail: { blockId, newText }\n        });\n        window.dispatchEvent(event);\n        return true;\n    }\n    clearSuggestion() {\n        if (this.currentSuggestion?.element) {\n            this.currentSuggestion.element.remove();\n        }\n        this.currentSuggestion = null;\n        if (this.suggestionTimeout) {\n            clearTimeout(this.suggestionTimeout);\n            this.suggestionTimeout = null;\n        }\n    }\n    hasSuggestion() {\n        return this.currentSuggestion?.isActive ?? false;\n    }\n    getCurrentSuggestion() {\n        return this.currentSuggestion;\n    }\n    // Update suggestion position when text changes\n    updateSuggestionPosition(blockElement) {\n        if (!this.currentSuggestion || !this.currentSuggestion.element)\n            return;\n        const contentElement = blockElement.querySelector('.block-content');\n        if (contentElement) {\n            this.positionSuggestionElement(contentElement, this.currentSuggestion.element);\n        }\n    }\n    // Check if suggestion is still valid (text hasn't changed too much)\n    isSuggestionValid(currentText) {\n        if (!this.currentSuggestion)\n            return false;\n        // If the original text is still a prefix of current text, suggestion might still be valid\n        return currentText.startsWith(this.currentSuggestion.originalText);\n    }\n    destroy() {\n        this.clearSuggestion();\n        if (this.suggestionTimeout) {\n            clearTimeout(this.suggestionTimeout);\n        }\n    }\n    extractKeywords(text) {\n        // Simple keyword extraction - split by words and filter meaningful ones\n        const words = text\n            .toLowerCase()\n            .replace(/[^\\w\\s]/g, ' ')\n            .split(/\\s+/)\n            .filter(word => word.length > 3) // Filter short words\n            .filter(word => !this.isStopWord(word));\n        // Return unique words, limited to avoid too much context\n        return [...new Set(words)].slice(0, 10);\n    }\n    isStopWord(word) {\n        const stopWords = new Set([\n            'this', 'that', 'with', 'have', 'will', 'from', 'they', 'been',\n            'were', 'said', 'each', 'which', 'their', 'time', 'about', 'there',\n            'could', 'other', 'more', 'very', 'what', 'know', 'just', 'first',\n            'into', 'over', 'think', 'also', 'your', 'work', 'life', 'only',\n            'new', 'would', 'come', 'its', 'after', 'way', 'who', 'may',\n            'say', 'great', 'where', 'much', 'should', 'well', 'large', 'use'\n        ]);\n        return stopWords.has(word);\n    }\n}\n","export class DragAndDrop {\n    constructor(editor, editorElement) {\n        this.draggedElement = null;\n        this.draggedBlockId = null;\n        this.isDragging = false;\n        this.startY = 0;\n        this.startX = 0;\n        this.editor = editor;\n        this.editorElement = editorElement;\n        this.setupEventListeners();\n    }\n    setupEventListeners() {\n        // Use event delegation for better performance\n        this.editorElement.addEventListener('mousedown', this.handleMouseDown.bind(this));\n        document.addEventListener('mousemove', this.handleMouseMove.bind(this));\n        document.addEventListener('mouseup', this.handleMouseUp.bind(this));\n    }\n    handleMouseDown(event) {\n        const target = event.target;\n        // Check if clicked on drag handle\n        if (!target.closest('.block-handle')) {\n            return;\n        }\n        const blockElement = target.closest('.block');\n        if (!blockElement) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        this.draggedElement = blockElement;\n        this.draggedBlockId = blockElement.dataset.blockId || null;\n        this.startY = event.clientY;\n        this.startX = event.clientX;\n        // Add dragging class after a small delay to ensure it's a drag, not just a click\n        setTimeout(() => {\n            if (this.draggedElement && this.isDragging) {\n                this.draggedElement.classList.add('dragging');\n            }\n        }, 100);\n    }\n    handleMouseMove(event) {\n        if (!this.draggedElement || !this.draggedBlockId) {\n            return;\n        }\n        const deltaY = Math.abs(event.clientY - this.startY);\n        const deltaX = Math.abs(event.clientX - this.startX);\n        // Start dragging if moved enough\n        if (!this.isDragging && (deltaY > 5 || deltaX > 5)) {\n            this.isDragging = true;\n            this.draggedElement.classList.add('dragging');\n            document.body.style.cursor = 'grabbing';\n            document.body.style.userSelect = 'none';\n        }\n        if (!this.isDragging) {\n            return;\n        }\n        // Find the block we're hovering over\n        const hoveredElement = this.getBlockElementUnderCursor(event.clientX, event.clientY);\n        // Clear all drag-over classes\n        this.clearDragOverClasses();\n        if (hoveredElement && hoveredElement !== this.draggedElement) {\n            const rect = hoveredElement.getBoundingClientRect();\n            const midPoint = rect.top + (rect.height / 2);\n            if (event.clientY < midPoint) {\n                hoveredElement.classList.add('drag-over-top');\n            }\n            else {\n                hoveredElement.classList.add('drag-over-bottom');\n            }\n        }\n    }\n    handleMouseUp(event) {\n        if (!this.isDragging || !this.draggedElement || !this.draggedBlockId) {\n            this.cleanup();\n            return;\n        }\n        // Find the target position\n        const targetElement = this.getBlockElementUnderCursor(event.clientX, event.clientY);\n        if (targetElement && targetElement !== this.draggedElement) {\n            const targetBlockId = targetElement.dataset.blockId;\n            if (targetBlockId) {\n                const rect = targetElement.getBoundingClientRect();\n                const midPoint = rect.top + (rect.height / 2);\n                const insertAbove = event.clientY < midPoint;\n                this.moveBlock(this.draggedBlockId, targetBlockId, insertAbove);\n            }\n        }\n        this.cleanup();\n    }\n    getBlockElementUnderCursor(x, y) {\n        // Temporarily hide the dragged element to get the element underneath\n        const originalDisplay = this.draggedElement?.style.display;\n        if (this.draggedElement) {\n            this.draggedElement.style.display = 'none';\n        }\n        const elementUnder = document.elementFromPoint(x, y);\n        const blockElement = elementUnder?.closest('.block');\n        // Restore the dragged element\n        if (this.draggedElement && originalDisplay !== undefined) {\n            this.draggedElement.style.display = originalDisplay;\n        }\n        return blockElement;\n    }\n    clearDragOverClasses() {\n        const blocks = this.editorElement.querySelectorAll('.block');\n        blocks.forEach(block => {\n            block.classList.remove('drag-over-top', 'drag-over-bottom');\n        });\n    }\n    moveBlock(draggedBlockId, targetBlockId, insertAbove) {\n        // Get the current indices\n        const blocks = this.editor.getBlocks();\n        const draggedIndex = blocks.findIndex(b => b.id === draggedBlockId);\n        const targetIndex = blocks.findIndex(b => b.id === targetBlockId);\n        if (draggedIndex === -1 || targetIndex === -1 || draggedIndex === targetIndex) {\n            return;\n        }\n        // Calculate new position\n        let newIndex = targetIndex;\n        if (!insertAbove) {\n            newIndex = targetIndex + 1;\n        }\n        // Adjust for removal of dragged element\n        if (draggedIndex < newIndex) {\n            newIndex--;\n        }\n        // Use the editor's move method\n        this.editor.moveBlock(draggedBlockId, newIndex);\n    }\n    cleanup() {\n        if (this.draggedElement) {\n            this.draggedElement.classList.remove('dragging');\n        }\n        this.clearDragOverClasses();\n        document.body.style.cursor = '';\n        document.body.style.userSelect = '';\n        this.draggedElement = null;\n        this.draggedBlockId = null;\n        this.isDragging = false;\n    }\n    destroy() {\n        // Remove event listeners if needed\n        // In a real implementation, we'd store references to bound functions\n        this.cleanup();\n    }\n}\n","import { BlockFactory } from './BlockFactory';\nimport { BlockRenderer } from './BlockRenderer';\nimport { InlineSuggestion } from './InlineSuggestion';\nimport { DragAndDrop } from './DragAndDrop';\nexport class Editor {\n    constructor(container, gemmaService, referenceManager) {\n        this.blocks = [];\n        this.currentBlockId = null;\n        this.blockIdCounter = 0;\n        this.container = container;\n        this.gemmaService = gemmaService;\n        this.referenceManager = referenceManager;\n        this.blockFactory = new BlockFactory();\n        this.blockRenderer = new BlockRenderer();\n        this.inlineSuggestion = new InlineSuggestion(gemmaService, referenceManager);\n        this.initializeEditor();\n        this.setupEventListeners();\n        this.setupSuggestionHandlers();\n        // Initialize drag and drop after editor element is ready\n        this.dragAndDrop = new DragAndDrop(this, this.editorElement);\n        // Start with an empty paragraph\n        this.addBlock('paragraph');\n    }\n    initializeEditor() {\n        this.editorElement = this.container.querySelector('#editor');\n        if (!this.editorElement) {\n            this.editorElement = document.createElement('div');\n            this.editorElement.className = 'editor';\n            this.editorElement.id = 'editor';\n            this.container.appendChild(this.editorElement);\n        }\n    }\n    setupEventListeners() {\n        this.editorElement.addEventListener('keydown', this.handleKeyDown.bind(this));\n        this.editorElement.addEventListener('input', this.handleInput.bind(this));\n        this.editorElement.addEventListener('click', this.handleClick.bind(this));\n        // Global drag and drop for images\n        this.setupGlobalImageDragDrop();\n    }\n    setupSuggestionHandlers() {\n        // Listen for suggestion acceptance\n        window.addEventListener('acceptSuggestion', (event) => {\n            const customEvent = event;\n            const { blockId, newText } = customEvent.detail;\n            this.updateBlock(blockId, { content: newText });\n            // Focus the block and position cursor at the end\n            setTimeout(() => {\n                this.focusBlock(blockId, 'end');\n            }, 10);\n        });\n        // Listen for image uploads\n        window.addEventListener('imageUploaded', (event) => {\n            const customEvent = event;\n            const { blockId } = customEvent.detail;\n            // Re-render the block to show the uploaded image\n            const block = this.getBlockById(blockId);\n            if (block) {\n                this.updateBlockElement(block);\n            }\n        });\n    }\n    setupGlobalImageDragDrop() {\n        // Prevent default drag behaviors on the entire editor\n        this.editorElement.addEventListener('dragover', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            // Check if dragging files\n            if (e.dataTransfer?.types.includes('Files')) {\n                this.editorElement.classList.add('drag-over');\n            }\n        });\n        this.editorElement.addEventListener('dragleave', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            // Only remove if leaving the editor entirely\n            if (!this.editorElement.contains(e.relatedTarget)) {\n                this.editorElement.classList.remove('drag-over');\n            }\n        });\n        this.editorElement.addEventListener('drop', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            this.editorElement.classList.remove('drag-over');\n            const files = e.dataTransfer?.files;\n            if (!files || files.length === 0)\n                return;\n            // Filter for image files\n            const imageFiles = Array.from(files).filter(file => file.type.startsWith('image/'));\n            if (imageFiles.length === 0) {\n                alert('Please drop image files only.');\n                return;\n            }\n            // Find the drop position\n            const dropPosition = this.getDropPosition(e.clientY);\n            // Check if there's an empty image block at or near the drop position that we can reuse\n            let startIndex = dropPosition;\n            const emptyImageBlock = this.findEmptyImageBlockNear(dropPosition);\n            // Create or reuse image blocks for each dropped image\n            imageFiles.forEach((file, index) => {\n                let blockId;\n                if (index === 0 && emptyImageBlock) {\n                    // Reuse the first empty image block we found\n                    blockId = emptyImageBlock.id;\n                }\n                else {\n                    // Create new blocks for additional images\n                    const insertIndex = emptyImageBlock ? dropPosition + index : startIndex + index;\n                    blockId = this.addBlock('image', '', insertIndex);\n                }\n                // Read the file and update the block\n                const reader = new FileReader();\n                reader.onload = (event) => {\n                    const result = event.target?.result;\n                    this.updateBlock(blockId, {\n                        metadata: {\n                            src: result,\n                            alt: file.name,\n                            width: 600,\n                            file: file\n                        }\n                    });\n                };\n                reader.readAsDataURL(file);\n            });\n        });\n    }\n    getDropPosition(clientY) {\n        const blocks = Array.from(this.editorElement.querySelectorAll('.block'));\n        for (let i = 0; i < blocks.length; i++) {\n            const blockElement = blocks[i];\n            const rect = blockElement.getBoundingClientRect();\n            const blockCenterY = rect.top + (rect.height / 2);\n            if (clientY <= blockCenterY) {\n                return i;\n            }\n        }\n        // Drop at the end if no suitable position found\n        return this.blocks.length;\n    }\n    findEmptyImageBlockNear(dropPosition) {\n        // Check a range around the drop position for empty image blocks\n        const searchRange = 2; // Check 2 blocks before and after\n        const start = Math.max(0, dropPosition - searchRange);\n        const end = Math.min(this.blocks.length, dropPosition + searchRange + 1);\n        for (let i = start; i < end; i++) {\n            const block = this.blocks[i];\n            if (block &&\n                block.type === 'image' &&\n                (!block.metadata?.src || block.metadata.src === '')) {\n                return block;\n            }\n        }\n        return null;\n    }\n    handleKeyDown(event) {\n        const target = event.target;\n        const blockElement = target.closest('.block');\n        if (!blockElement)\n            return;\n        const blockId = blockElement.dataset.blockId;\n        if (!blockId)\n            return;\n        switch (event.key) {\n            case 'Enter':\n                event.preventDefault();\n                this.handleEnterKey(blockId, event.shiftKey);\n                break;\n            case 'Backspace':\n                this.handleBackspaceKey(blockId, target);\n                break;\n            case 'ArrowUp':\n                this.handleArrowKey(blockId, 'up');\n                break;\n            case 'ArrowDown':\n                this.handleArrowKey(blockId, 'down');\n                break;\n            case 'Tab':\n                event.preventDefault();\n                // Check if there's an active suggestion to accept\n                if (this.inlineSuggestion.hasSuggestion()) {\n                    this.inlineSuggestion.acceptSuggestion();\n                }\n                else {\n                    this.handleTab(blockId, event.shiftKey);\n                }\n                break;\n            case '/':\n                // Trigger AI command palette\n                if (event.ctrlKey || event.metaKey) {\n                    event.preventDefault();\n                    this.showAICommandPalette(blockId);\n                }\n                break;\n            case 'Escape':\n                // Clear any active suggestion\n                if (this.inlineSuggestion.hasSuggestion()) {\n                    event.preventDefault();\n                    this.inlineSuggestion.clearSuggestion();\n                }\n                break;\n        }\n    }\n    handleInput(event) {\n        const inputEvent = event;\n        const target = event.target;\n        const blockElement = target.closest('.block');\n        if (!blockElement)\n            return;\n        const blockId = blockElement.dataset.blockId;\n        if (!blockId)\n            return;\n        const block = this.getBlockById(blockId);\n        if (!block)\n            return;\n        // Update block content\n        const newContent = target.textContent || '';\n        block.content = newContent;\n        // Clear suggestion if text changed significantly\n        if (this.inlineSuggestion.hasSuggestion() && !this.inlineSuggestion.isSuggestionValid(newContent)) {\n            this.inlineSuggestion.clearSuggestion();\n        }\n        // Handle markdown-like shortcuts\n        this.handleMarkdownShortcuts(block, target);\n        // Trigger inline suggestion for certain input types (but not spaces to avoid interruption)\n        if (inputEvent.inputType === 'insertText' && inputEvent.data !== ' ' && newContent.length > 2) {\n            const context = this.getDocumentContext();\n            this.inlineSuggestion.requestSuggestion(blockId, blockElement, newContent, context);\n        }\n        // Update suggestion position if it exists\n        if (this.inlineSuggestion.hasSuggestion()) {\n            this.inlineSuggestion.updateSuggestionPosition(blockElement);\n        }\n        this.notifyChange();\n    }\n    handleClick(event) {\n        const target = event.target;\n        const blockElement = target.closest('.block');\n        // Clear suggestions when clicking (user is repositioning cursor)\n        this.inlineSuggestion.clearSuggestion();\n        if (blockElement) {\n            const blockId = blockElement.dataset.blockId;\n            if (blockId) {\n                this.setCurrentBlock(blockId);\n            }\n        }\n    }\n    handleEnterKey(blockId, shiftKey) {\n        if (shiftKey) {\n            // Shift+Enter: insert line break\n            document.execCommand('insertLineBreak');\n            return;\n        }\n        const block = this.getBlockById(blockId);\n        if (!block)\n            return;\n        const selection = window.getSelection();\n        if (!selection)\n            return;\n        const range = selection.getRangeAt(0);\n        const beforeCursor = range.startContainer.textContent?.substring(0, range.startOffset) || '';\n        const afterCursor = range.startContainer.textContent?.substring(range.startOffset) || '';\n        // Update current block with content before cursor\n        block.content = beforeCursor;\n        this.updateBlockElement(block);\n        // Find the index of the current block to insert after it\n        const currentBlockIndex = this.blocks.findIndex(b => b.id === blockId);\n        if (currentBlockIndex === -1)\n            return;\n        // Create new block with content after cursor, inserted right after current block\n        const newBlockId = this.addBlock('paragraph', afterCursor, currentBlockIndex + 1);\n        // Focus new block\n        setTimeout(() => {\n            this.focusBlock(newBlockId);\n        }, 0);\n    }\n    handleBackspaceKey(blockId, target) {\n        const block = this.getBlockById(blockId);\n        if (!block)\n            return;\n        const selection = window.getSelection();\n        if (!selection || selection.rangeCount === 0)\n            return;\n        const range = selection.getRangeAt(0);\n        // If cursor is at the beginning of the block and block is empty\n        if (range.startOffset === 0 && (!block.content || block.content.trim() === '')) {\n            const blockIndex = this.blocks.findIndex(b => b.id === blockId);\n            if (blockIndex > 0) {\n                // Remove current block and focus previous one\n                this.removeBlock(blockId);\n                const prevBlock = this.blocks[blockIndex - 1];\n                if (prevBlock) {\n                    this.focusBlock(prevBlock.id, 'end');\n                }\n            }\n        }\n    }\n    handleArrowKey(blockId, direction) {\n        // Clear suggestions when navigating with arrows\n        this.inlineSuggestion.clearSuggestion();\n        const blockIndex = this.blocks.findIndex(b => b.id === blockId);\n        if (direction === 'up' && blockIndex > 0) {\n            this.focusBlock(this.blocks[blockIndex - 1].id, 'end');\n        }\n        else if (direction === 'down' && blockIndex < this.blocks.length - 1) {\n            this.focusBlock(this.blocks[blockIndex + 1].id, 'start');\n        }\n    }\n    handleTab(blockId, shiftKey) {\n        // Handle indentation for lists\n        const block = this.getBlockById(blockId);\n        if (!block)\n            return;\n        if (block.type.includes('list')) {\n            // Implement list indentation logic\n            console.log('List indentation not yet implemented');\n        }\n    }\n    handleMarkdownShortcuts(block, target) {\n        const content = target.textContent || '';\n        // Check for heading shortcuts\n        const headingMatch = content.match(/^(#{1,6})\\s(.*)$/);\n        if (headingMatch) {\n            const level = headingMatch[1].length;\n            const text = headingMatch[2];\n            block.type = `heading-${level}`;\n            block.content = text;\n            this.updateBlockElement(block);\n            this.focusBlock(block.id, 'end');\n            return;\n        }\n        // Check for quote shortcut\n        if (content.startsWith('> ')) {\n            block.type = 'quote';\n            block.content = content.substring(2);\n            this.updateBlockElement(block);\n            this.focusBlock(block.id, 'end');\n            return;\n        }\n        // Check for code block shortcut\n        if (content.startsWith('``` ')) {\n            block.type = 'code';\n            block.content = content.substring(4);\n            this.updateBlockElement(block);\n            this.focusBlock(block.id, 'end');\n            return;\n        }\n        // Check for horizontal rule\n        if (content === '---' || content === '***') {\n            block.type = 'horizontal-rule';\n            block.content = '';\n            this.updateBlockElement(block);\n            // Add new paragraph after horizontal rule\n            const newBlockId = this.addBlock('paragraph');\n            this.focusBlock(newBlockId);\n            return;\n        }\n        // Check for bullet list\n        if (content.startsWith('- ') || content.startsWith('* ')) {\n            block.type = 'bullet-list';\n            block.content = content.substring(2);\n            this.updateBlockElement(block);\n            this.focusBlock(block.id, 'end');\n            return;\n        }\n        // Check for numbered list\n        const numberedMatch = content.match(/^(\\d+)\\.\\s(.*)$/);\n        if (numberedMatch) {\n            block.type = 'numbered-list';\n            block.content = numberedMatch[2];\n            this.updateBlockElement(block);\n            this.focusBlock(block.id, 'end');\n            return;\n        }\n        // Check for checklist\n        if (content.startsWith('- [ ] ') || content.startsWith('- [x] ')) {\n            block.type = 'checklist';\n            block.content = content.substring(6);\n            block.metadata = { checked: content.includes('[x]') };\n            this.updateBlockElement(block);\n            this.focusBlock(block.id, 'end');\n            return;\n        }\n        // Check for image shortcut\n        if (content === '/image' || content === '/img') {\n            block.type = 'image';\n            block.content = '';\n            block.metadata = {};\n            this.updateBlockElement(block);\n            return;\n        }\n    }\n    addBlock(type, content = '', index) {\n        const blockId = `block-${++this.blockIdCounter}`;\n        const block = this.blockFactory.createBlock(blockId, type, content);\n        if (index !== undefined) {\n            this.blocks.splice(index, 0, block);\n        }\n        else {\n            this.blocks.push(block);\n        }\n        this.renderBlock(block, index);\n        this.notifyChange();\n        return blockId;\n    }\n    removeBlock(blockId) {\n        const index = this.blocks.findIndex(b => b.id === blockId);\n        if (index !== -1) {\n            this.blocks.splice(index, 1);\n            const blockElement = this.editorElement.querySelector(`[data-block-id=\"${blockId}\"]`);\n            if (blockElement) {\n                blockElement.remove();\n            }\n            this.notifyChange();\n        }\n    }\n    updateBlock(blockId, updates) {\n        const block = this.getBlockById(blockId);\n        if (block) {\n            Object.assign(block, updates);\n            this.updateBlockElement(block);\n            this.notifyChange();\n        }\n    }\n    moveBlock(blockId, newIndex) {\n        const currentIndex = this.blocks.findIndex(b => b.id === blockId);\n        if (currentIndex !== -1 && newIndex >= 0 && newIndex < this.blocks.length) {\n            const [block] = this.blocks.splice(currentIndex, 1);\n            this.blocks.splice(newIndex, 0, block);\n            this.rerenderEditor();\n            this.notifyChange();\n        }\n    }\n    renderBlock(block, index) {\n        const blockElement = this.blockRenderer.render(block);\n        if (index !== undefined && index < this.editorElement.children.length) {\n            this.editorElement.insertBefore(blockElement, this.editorElement.children[index]);\n        }\n        else {\n            this.editorElement.appendChild(blockElement);\n        }\n    }\n    updateBlockElement(block) {\n        const blockElement = this.editorElement.querySelector(`[data-block-id=\"${block.id}\"]`);\n        if (blockElement) {\n            const newElement = this.blockRenderer.render(block);\n            blockElement.replaceWith(newElement);\n        }\n    }\n    rerenderEditor() {\n        this.editorElement.innerHTML = '';\n        this.blocks.forEach(block => this.renderBlock(block));\n    }\n    getBlockById(blockId) {\n        return this.blocks.find(b => b.id === blockId);\n    }\n    setCurrentBlock(blockId) {\n        this.currentBlockId = blockId;\n    }\n    focusBlock(blockId, position = 'start') {\n        const blockElement = this.editorElement.querySelector(`[data-block-id=\"${blockId}\"] .block-content`);\n        if (blockElement) {\n            blockElement.focus();\n            const selection = window.getSelection();\n            const range = document.createRange();\n            if (position === 'end') {\n                range.selectNodeContents(blockElement);\n                range.collapse(false);\n            }\n            else {\n                range.setStart(blockElement, 0);\n                range.collapse(true);\n            }\n            selection?.removeAllRanges();\n            selection?.addRange(range);\n        }\n    }\n    getDocumentContext() {\n        return this.blocks.map(block => block.content).join('\\n');\n    }\n    getReferenceContext(instruction) {\n        // Extract keywords from instruction and document context\n        const documentText = this.getDocumentContext();\n        const allText = instruction + ' ' + documentText;\n        const keywords = this.extractKeywords(allText);\n        // Get relevant reference content\n        return this.referenceManager.getRelevantContent(keywords, 2000);\n    }\n    extractKeywords(text) {\n        // Simple keyword extraction - split by words and filter meaningful ones\n        const words = text\n            .toLowerCase()\n            .replace(/[^\\w\\s]/g, ' ')\n            .split(/\\s+/)\n            .filter(word => word.length > 3) // Filter short words\n            .filter(word => !this.isStopWord(word));\n        // Return unique words, limited to avoid too much context\n        return [...new Set(words)].slice(0, 15);\n    }\n    isStopWord(word) {\n        const stopWords = new Set([\n            'this', 'that', 'with', 'have', 'will', 'from', 'they', 'been',\n            'were', 'said', 'each', 'which', 'their', 'time', 'about', 'there',\n            'could', 'other', 'more', 'very', 'what', 'know', 'just', 'first',\n            'into', 'over', 'think', 'also', 'your', 'work', 'life', 'only',\n            'new', 'would', 'come', 'its', 'after', 'way', 'who', 'may',\n            'say', 'great', 'where', 'much', 'should', 'well', 'large', 'use',\n            'make', 'write', 'generate', 'create', 'please', 'help'\n        ]);\n        return stopWords.has(word);\n    }\n    notifyChange() {\n        // Notify other components about editor changes\n        const event = new CustomEvent('editorChange', {\n            detail: { blocks: this.blocks }\n        });\n        window.dispatchEvent(event);\n    }\n    getState() {\n        return {\n            blocks: [...this.blocks],\n            currentBlockId: this.currentBlockId\n        };\n    }\n    loadContent(state) {\n        this.blocks = [...state.blocks];\n        this.currentBlockId = state.currentBlockId;\n        this.blockIdCounter = Math.max(...this.blocks.map(b => parseInt(b.id.split('-')[1]) || 0));\n        this.rerenderEditor();\n    }\n    getBlocks() {\n        return [...this.blocks];\n    }\n    showAutoCompletionNotification(message) {\n        const notification = document.createElement('div');\n        notification.textContent = message;\n        notification.style.cssText = `\n      position: fixed;\n      top: 70px;\n      right: 20px;\n      background: #4caf50;\n      color: white;\n      padding: 8px 16px;\n      border-radius: 4px;\n      font-size: 14px;\n      z-index: 1000;\n      animation: slideInRight 0.3s ease;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n    `;\n        document.body.appendChild(notification);\n        setTimeout(() => {\n            notification.style.animation = 'slideOutRight 0.3s ease';\n            setTimeout(() => {\n                if (notification.parentNode) {\n                    notification.remove();\n                }\n            }, 300);\n        }, 2000);\n    }\n    async insertAIGeneratedContent(instruction, insertAtCurrentBlock = true) {\n        try {\n            const context = this.getDocumentContext();\n            const referenceContext = this.getReferenceContext(instruction);\n            let insertIndex = this.blocks.length;\n            if (insertAtCurrentBlock && this.currentBlockId) {\n                const currentIndex = this.blocks.findIndex(b => b.id === this.currentBlockId);\n                insertIndex = currentIndex + 1;\n            }\n            // Show loading indicator\n            const loadingBlockId = this.addBlock('paragraph', '🤖 Generating content...', insertIndex);\n            // Generate content with reference context\n            const generatedContent = await this.gemmaService.composeDocument(instruction, context, referenceContext);\n            if (generatedContent && generatedContent.trim()) {\n                // Remove loading block\n                this.removeBlock(loadingBlockId);\n                // Parse and insert the generated content as blocks\n                this.insertGeneratedContentAsBlocks(generatedContent, insertIndex);\n                this.showAutoCompletionNotification('AI content generated and inserted!');\n            }\n            else {\n                // Remove loading block if no content generated\n                this.removeBlock(loadingBlockId);\n                this.showAutoCompletionNotification('No content generated');\n            }\n        }\n        catch (error) {\n            console.error('AI content generation failed:', error);\n            this.showAutoCompletionNotification('AI generation failed');\n        }\n    }\n    insertGeneratedContentAsBlocks(content, startIndex) {\n        const lines = content.split('\\n').filter(line => line.trim());\n        let currentIndex = startIndex;\n        for (const line of lines) {\n            const trimmedLine = line.trim();\n            if (!trimmedLine)\n                continue;\n            // Determine block type based on content\n            let blockType = 'paragraph';\n            let blockContent = trimmedLine;\n            let metadata = {};\n            // Check for headings\n            const headingMatch = trimmedLine.match(/^(#{1,6})\\s(.+)$/);\n            if (headingMatch) {\n                const level = headingMatch[1].length;\n                blockType = `heading-${level}`;\n                blockContent = headingMatch[2];\n                metadata = { level };\n            }\n            // Check for bullet lists\n            else if (trimmedLine.startsWith('- ')) {\n                blockType = 'bullet-list';\n                blockContent = trimmedLine.substring(2);\n                metadata = { level: 0 };\n            }\n            // Check for numbered lists\n            else if (trimmedLine.match(/^\\d+\\.\\s/)) {\n                blockType = 'numbered-list';\n                const match = trimmedLine.match(/^(\\d+)\\.\\s(.+)$/);\n                if (match) {\n                    blockContent = match[2];\n                    metadata = { level: 0, number: parseInt(match[1]) };\n                }\n            }\n            // Check for quotes\n            else if (trimmedLine.startsWith('> ')) {\n                blockType = 'quote';\n                blockContent = trimmedLine.substring(2);\n            }\n            // Check for code blocks\n            else if (trimmedLine.startsWith('```')) {\n                blockType = 'code';\n                blockContent = trimmedLine.substring(3).trim();\n                metadata = { language: blockContent || 'text' };\n                blockContent = ''; // Code content would be on next lines\n            }\n            this.addBlock(blockType, blockContent, currentIndex);\n            currentIndex++;\n        }\n    }\n    async streamAIContentIntoEditor(instruction) {\n        try {\n            const context = this.getDocumentContext();\n            const referenceContext = this.getReferenceContext(instruction);\n            let insertIndex = this.blocks.length;\n            if (this.currentBlockId) {\n                const currentIndex = this.blocks.findIndex(b => b.id === this.currentBlockId);\n                insertIndex = currentIndex + 1;\n            }\n            // Create a block for streaming content\n            const streamingBlockId = this.addBlock('paragraph', '', insertIndex);\n            let accumulatedContent = '';\n            await this.gemmaService.streamComposeDocument(instruction, (chunk) => {\n                accumulatedContent += chunk;\n                this.updateBlock(streamingBlockId, { content: accumulatedContent });\n                // Auto-scroll to the streaming block\n                const blockElement = this.editorElement.querySelector(`[data-block-id=\"${streamingBlockId}\"]`);\n                if (blockElement && typeof blockElement.scrollIntoView === 'function') {\n                    blockElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n                }\n            }, context, referenceContext);\n            // After streaming is complete, parse content into proper blocks\n            if (accumulatedContent.trim()) {\n                this.removeBlock(streamingBlockId);\n                this.insertGeneratedContentAsBlocks(accumulatedContent, insertIndex);\n                this.showAutoCompletionNotification('AI content streamed successfully!');\n            }\n        }\n        catch (error) {\n            console.error('Streaming AI content failed:', error);\n            this.showAutoCompletionNotification('Streaming failed');\n        }\n    }\n    showAICommandPalette(blockId) {\n        const palette = document.createElement('div');\n        palette.className = 'ai-command-palette';\n        palette.style.cssText = `\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: white;\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      box-shadow: 0 4px 20px rgba(0,0,0,0.15);\n      padding: 20px;\n      width: 400px;\n      z-index: 1001;\n    `;\n        const title = document.createElement('h3');\n        title.textContent = '🤖 AI Assistant';\n        title.style.cssText = 'margin: 0 0 15px 0; color: #333;';\n        const input = document.createElement('input');\n        input.type = 'text';\n        input.placeholder = 'What would you like me to write? (e.g., \"Write a paragraph about...\")';\n        input.style.cssText = `\n      width: 100%;\n      padding: 12px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      font-size: 14px;\n      outline: none;\n      margin-bottom: 15px;\n    `;\n        const buttonsContainer = document.createElement('div');\n        buttonsContainer.style.cssText = 'display: flex; gap: 10px; justify-content: flex-end;';\n        const generateButton = document.createElement('button');\n        generateButton.textContent = 'Generate';\n        generateButton.style.cssText = `\n      background: #2196f3;\n      color: white;\n      border: none;\n      padding: 8px 16px;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n    `;\n        const cancelButton = document.createElement('button');\n        cancelButton.textContent = 'Cancel';\n        cancelButton.style.cssText = `\n      background: #666;\n      color: white;\n      border: none;\n      padding: 8px 16px;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n    `;\n        // Event handlers\n        const handleGenerate = async () => {\n            const instruction = input.value.trim();\n            if (!instruction)\n                return;\n            document.body.removeChild(palette);\n            await this.streamAIContentIntoEditor(instruction);\n        };\n        const handleCancel = () => {\n            document.body.removeChild(palette);\n            this.focusBlock(blockId);\n        };\n        generateButton.addEventListener('click', handleGenerate);\n        cancelButton.addEventListener('click', handleCancel);\n        input.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter') {\n                e.preventDefault();\n                handleGenerate();\n            }\n            else if (e.key === 'Escape') {\n                e.preventDefault();\n                handleCancel();\n            }\n        });\n        buttonsContainer.appendChild(cancelButton);\n        buttonsContainer.appendChild(generateButton);\n        palette.appendChild(title);\n        palette.appendChild(input);\n        palette.appendChild(buttonsContainer);\n        document.body.appendChild(palette);\n        input.focus();\n    }\n    destroy() {\n        // Clean up inline suggestions\n        this.inlineSuggestion.destroy();\n        // Clean up drag and drop\n        this.dragAndDrop.destroy();\n        // Note: In a real implementation, we'd store the handler reference to properly remove it\n        // For now, this is just a placeholder for cleanup\n    }\n}\n","export class FileStorage {\n    constructor() {\n        this.storageKey = 'gemma-notebook';\n        this.metadataKey = 'gemma-notebook-metadata';\n    }\n    async save(filename, content) {\n        try {\n            const serializedContent = JSON.stringify(content);\n            const storageData = this.getStorageData();\n            storageData[filename] = serializedContent;\n            localStorage.setItem(this.storageKey, JSON.stringify(storageData));\n            // Update metadata\n            this.updateMetadata(filename, serializedContent.length);\n            console.log(`Document saved: ${filename}`);\n        }\n        catch (error) {\n            console.error('Failed to save document:', error);\n            throw new Error(`Failed to save document: ${filename}`);\n        }\n    }\n    async load(filename) {\n        try {\n            const storageData = this.getStorageData();\n            const serializedContent = storageData[filename];\n            if (!serializedContent) {\n                return null;\n            }\n            const content = JSON.parse(serializedContent);\n            // Convert date strings back to Date objects\n            content.blocks = content.blocks.map(block => ({\n                ...block,\n                createdAt: new Date(block.createdAt),\n                updatedAt: new Date(block.updatedAt)\n            }));\n            console.log(`Document loaded: ${filename}`);\n            return content;\n        }\n        catch (error) {\n            console.error(`Failed to load document: ${filename}`, error);\n            throw new Error(`Failed to load document: ${filename}`);\n        }\n    }\n    async delete(filename) {\n        try {\n            const storageData = this.getStorageData();\n            delete storageData[filename];\n            localStorage.setItem(this.storageKey, JSON.stringify(storageData));\n            // Remove from metadata\n            this.removeMetadata(filename);\n            console.log(`Document deleted: ${filename}`);\n        }\n        catch (error) {\n            console.error(`Failed to delete document: ${filename}`, error);\n            throw new Error(`Failed to delete document: ${filename}`);\n        }\n    }\n    async exists(filename) {\n        const storageData = this.getStorageData();\n        return filename in storageData;\n    }\n    async list() {\n        try {\n            const metadata = this.getMetadata();\n            return Object.values(metadata).sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime());\n        }\n        catch (error) {\n            console.error('Failed to list documents:', error);\n            return [];\n        }\n    }\n    async export(filename, format = 'json') {\n        const content = await this.load(filename);\n        if (!content) {\n            throw new Error(`Document not found: ${filename}`);\n        }\n        switch (format) {\n            case 'json':\n                return JSON.stringify(content, null, 2);\n            case 'markdown':\n                return this.convertToMarkdown(content);\n            case 'text':\n                return this.convertToText(content);\n            default:\n                throw new Error(`Unsupported export format: ${format}`);\n        }\n    }\n    async import(filename, data, format = 'json') {\n        let content;\n        switch (format) {\n            case 'json':\n                content = JSON.parse(data);\n                break;\n            case 'markdown':\n                content = this.convertFromMarkdown(data);\n                break;\n            case 'text':\n                content = this.convertFromText(data);\n                break;\n            default:\n                throw new Error(`Unsupported import format: ${format}`);\n        }\n        await this.save(filename, content);\n    }\n    getStorageData() {\n        try {\n            const data = localStorage.getItem(this.storageKey);\n            return data ? JSON.parse(data) : {};\n        }\n        catch (error) {\n            console.error('Failed to parse storage data:', error);\n            return {};\n        }\n    }\n    getMetadata() {\n        try {\n            const data = localStorage.getItem(this.metadataKey);\n            const metadata = data ? JSON.parse(data) : {};\n            // Convert date strings back to Date objects\n            Object.values(metadata).forEach((file) => {\n                file.createdAt = new Date(file.createdAt);\n                file.updatedAt = new Date(file.updatedAt);\n            });\n            return metadata;\n        }\n        catch (error) {\n            console.error('Failed to parse metadata:', error);\n            return {};\n        }\n    }\n    updateMetadata(filename, size) {\n        const metadata = this.getMetadata();\n        const now = new Date();\n        if (metadata[filename]) {\n            metadata[filename].updatedAt = now;\n            metadata[filename].size = size;\n        }\n        else {\n            metadata[filename] = {\n                name: filename,\n                path: filename,\n                createdAt: now,\n                updatedAt: now,\n                size\n            };\n        }\n        localStorage.setItem(this.metadataKey, JSON.stringify(metadata));\n    }\n    removeMetadata(filename) {\n        const metadata = this.getMetadata();\n        delete metadata[filename];\n        localStorage.setItem(this.metadataKey, JSON.stringify(metadata));\n    }\n    convertToMarkdown(content) {\n        return content.blocks.map(block => {\n            switch (block.type) {\n                case 'heading-1':\n                    return `# ${block.content}`;\n                case 'heading-2':\n                    return `## ${block.content}`;\n                case 'heading-3':\n                    return `### ${block.content}`;\n                case 'heading-4':\n                    return `#### ${block.content}`;\n                case 'heading-5':\n                    return `##### ${block.content}`;\n                case 'heading-6':\n                    return `###### ${block.content}`;\n                case 'quote':\n                    return `> ${block.content}`;\n                case 'code':\n                    const language = block.metadata?.language || '';\n                    return `\\`\\`\\`${language}\\n${block.content}\\n\\`\\`\\``;\n                case 'bullet-list':\n                    return `- ${block.content}`;\n                case 'numbered-list':\n                    return `${block.metadata?.number || 1}. ${block.content}`;\n                case 'checklist':\n                    const checked = block.metadata?.checked ? 'x' : ' ';\n                    return `- [${checked}] ${block.content}`;\n                case 'horizontal-rule':\n                    return '---';\n                case 'paragraph':\n                default:\n                    return block.content;\n            }\n        }).join('\\n\\n');\n    }\n    convertToText(content) {\n        return content.blocks.map(block => block.content).join('\\n\\n');\n    }\n    convertFromMarkdown(markdown) {\n        const lines = markdown.split('\\n');\n        const blocks = [];\n        let blockIdCounter = 0;\n        for (const line of lines) {\n            if (!line.trim())\n                continue;\n            const blockId = `block-${++blockIdCounter}`;\n            const now = new Date();\n            // Headings\n            const headingMatch = line.match(/^(#{1,6})\\s+(.*)$/);\n            if (headingMatch) {\n                blocks.push({\n                    id: blockId,\n                    type: `heading-${headingMatch[1].length}`,\n                    content: headingMatch[2],\n                    metadata: { level: headingMatch[1].length },\n                    createdAt: now,\n                    updatedAt: now\n                });\n                continue;\n            }\n            // Quote\n            if (line.startsWith('> ')) {\n                blocks.push({\n                    id: blockId,\n                    type: 'quote',\n                    content: line.substring(2),\n                    metadata: {},\n                    createdAt: now,\n                    updatedAt: now\n                });\n                continue;\n            }\n            // Code block start\n            if (line.startsWith('```')) {\n                const language = line.substring(3).trim() || 'text';\n                blocks.push({\n                    id: blockId,\n                    type: 'code',\n                    content: '', // Will be filled by subsequent lines\n                    metadata: { language },\n                    createdAt: now,\n                    updatedAt: now\n                });\n                continue;\n            }\n            // Bullet list\n            if (line.startsWith('- ') || line.startsWith('* ')) {\n                blocks.push({\n                    id: blockId,\n                    type: 'bullet-list',\n                    content: line.substring(2),\n                    metadata: { level: 0 },\n                    createdAt: now,\n                    updatedAt: now\n                });\n                continue;\n            }\n            // Numbered list\n            const numberedMatch = line.match(/^(\\d+)\\.\\s+(.*)$/);\n            if (numberedMatch) {\n                blocks.push({\n                    id: blockId,\n                    type: 'numbered-list',\n                    content: numberedMatch[2],\n                    metadata: { level: 0, number: parseInt(numberedMatch[1]) },\n                    createdAt: now,\n                    updatedAt: now\n                });\n                continue;\n            }\n            // Checklist\n            const checklistMatch = line.match(/^-\\s+\\[([x\\s])\\]\\s+(.*)$/);\n            if (checklistMatch) {\n                blocks.push({\n                    id: blockId,\n                    type: 'checklist',\n                    content: checklistMatch[2],\n                    metadata: { checked: checklistMatch[1] === 'x', level: 0 },\n                    createdAt: now,\n                    updatedAt: now\n                });\n                continue;\n            }\n            // Horizontal rule\n            if (line.trim() === '---' || line.trim() === '***') {\n                blocks.push({\n                    id: blockId,\n                    type: 'horizontal-rule',\n                    content: '',\n                    metadata: {},\n                    createdAt: now,\n                    updatedAt: now\n                });\n                continue;\n            }\n            // Default to paragraph\n            blocks.push({\n                id: blockId,\n                type: 'paragraph',\n                content: line,\n                metadata: {},\n                createdAt: now,\n                updatedAt: now\n            });\n        }\n        return {\n            blocks,\n            currentBlockId: null\n        };\n    }\n    convertFromText(text) {\n        const paragraphs = text.split('\\n\\n').filter(p => p.trim());\n        const blocks = [];\n        let blockIdCounter = 0;\n        for (const paragraph of paragraphs) {\n            const blockId = `block-${++blockIdCounter}`;\n            const now = new Date();\n            blocks.push({\n                id: blockId,\n                type: 'paragraph',\n                content: paragraph.trim(),\n                metadata: {},\n                createdAt: now,\n                updatedAt: now\n            });\n        }\n        return {\n            blocks,\n            currentBlockId: null\n        };\n    }\n    // Utility methods for file management\n    async createBackup(filename) {\n        const content = await this.load(filename);\n        if (!content) {\n            throw new Error(`Document not found: ${filename}`);\n        }\n        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n        const backupFilename = `${filename}.backup.${timestamp}`;\n        await this.save(backupFilename, content);\n        return backupFilename;\n    }\n    async getStorageStats() {\n        const storageData = this.getStorageData();\n        const totalFiles = Object.keys(storageData).length;\n        const totalSize = JSON.stringify(storageData).length;\n        return {\n            totalFiles,\n            totalSize,\n            usage: `${(totalSize / 1024).toFixed(2)} KB`\n        };\n    }\n}\n","export class GemmaService {\n    constructor() {\n        this.isConnected = false;\n        this.baseUrl = 'http://localhost:11434/api';\n        this.modelName = 'gemma3:12b';\n    }\n    async initialize() {\n        try {\n            console.log('Initializing Gemma service...');\n            // Check if Ollama is running\n            const response = await fetch(`${this.baseUrl}/tags`);\n            if (!response.ok) {\n                throw new Error(`Ollama API not accessible: ${response.status}`);\n            }\n            const data = await response.json();\n            // Check if gemma3:27b model is available\n            const modelExists = data.models && data.models.some((model) => model.name === this.modelName || model.name.startsWith('gemma3:27b'));\n            if (!modelExists) {\n                console.warn(`Model ${this.modelName} not found. Available models:`, data.models?.map((m) => m.name));\n                throw new Error(`Model ${this.modelName} not found in Ollama. Please install it first with: ollama pull ${this.modelName}`);\n            }\n            this.isConnected = true;\n            console.log('Gemma service initialized successfully');\n        }\n        catch (error) {\n            console.error('Failed to initialize Gemma service:', error);\n            this.isConnected = false;\n            throw error;\n        }\n    }\n    async generate(prompt, options = {}) {\n        if (!this.isConnected) {\n            await this.initialize();\n        }\n        try {\n            const response = await fetch(`${this.baseUrl}/generate`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    model: this.modelName,\n                    prompt: prompt,\n                    stream: false,\n                    options: {\n                        num_predict: options.maxTokens || 256,\n                        temperature: options.temperature || 0.7,\n                        top_p: options.topP || 0.9,\n                        stop: options.stopSequences || []\n                    }\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`Generation failed: ${response.status}`);\n            }\n            const data = await response.json();\n            return data.response || '';\n        }\n        catch (error) {\n            console.error('Text generation failed:', error);\n            throw error;\n        }\n    }\n    async streamGenerate(prompt, callback, options = {}) {\n        if (!this.isConnected) {\n            await this.initialize();\n        }\n        try {\n            const response = await fetch(`${this.baseUrl}/generate`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    model: this.modelName,\n                    prompt: prompt,\n                    stream: true,\n                    options: {\n                        num_predict: options.maxTokens || 256,\n                        temperature: options.temperature || 0.7,\n                        top_p: options.topP || 0.9,\n                        stop: options.stopSequences || []\n                    }\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`Stream generation failed: ${response.status}`);\n            }\n            const reader = response.body?.getReader();\n            if (!reader) {\n                throw new Error('Failed to get response reader');\n            }\n            const decoder = new TextDecoder();\n            while (true) {\n                const { done, value } = await reader.read();\n                if (done)\n                    break;\n                const chunk = decoder.decode(value);\n                const lines = chunk.split('\\\\n').filter(line => line.trim());\n                for (const line of lines) {\n                    try {\n                        const data = JSON.parse(line);\n                        if (data.response) {\n                            callback(data.response);\n                        }\n                        if (data.done) {\n                            return;\n                        }\n                    }\n                    catch (e) {\n                        // Skip invalid JSON lines\n                        continue;\n                    }\n                }\n            }\n        }\n        catch (error) {\n            console.error('Stream generation failed:', error);\n            throw error;\n        }\n    }\n    async generateCompletion(currentText, context, referenceContext = '') {\n        // More focused prompt for inline completions like GitHub Copilot\n        const fullContext = referenceContext\n            ? `${context}\\n\\n--- Reference Materials ---\\n${referenceContext}`\n            : context;\n        const prompt = `You are an AI writing assistant. Based on the document context${referenceContext ? ' and reference materials' : ''}, provide a natural, concise continuation.\n\nDocument context:\n${fullContext}\n\nCurrent text being written: \"${currentText}\"\n\nContinue the current text naturally. Provide ONLY the continuation text (no quotes, no repetition of the current text). Keep it to 1-10 words maximum. Be concise and relevant${referenceContext ? '. Use information from reference materials when relevant' : ''}:`;\n        try {\n            const completion = await this.generate(prompt, {\n                maxTokens: 32, // Smaller for inline suggestions\n                temperature: 0.2, // Lower temperature for more predictable suggestions\n                stopSequences: ['\\n', '.', '!', '?', '\\r'] // Stop at sentence boundaries\n            });\n            // Clean up the completion\n            let cleanedCompletion = completion.trim();\n            // Remove any quotes or prefixes\n            cleanedCompletion = cleanedCompletion.replace(/^[\"']|[\"']$/g, '');\n            cleanedCompletion = cleanedCompletion.replace(/^(continue|completion|text):\\s*/i, '');\n            // Ensure it doesn't repeat the current text\n            if (cleanedCompletion.toLowerCase().startsWith(currentText.toLowerCase())) {\n                cleanedCompletion = cleanedCompletion.substring(currentText.length).trim();\n            }\n            return cleanedCompletion;\n        }\n        catch (error) {\n            console.error('Auto-completion failed:', error);\n            return '';\n        }\n    }\n    async generateFromChat(message, context = '', referenceContext = '') {\n        const fullContext = context && referenceContext\n            ? `Document context: ${context}\\n\\nReference materials: ${referenceContext}`\n            : context\n                ? `Document context: ${context}`\n                : referenceContext\n                    ? `Reference materials: ${referenceContext}`\n                    : '';\n        const prompt = fullContext\n            ? `${fullContext}\n\nUser message: ${message}\n\nProvide a helpful response using the available context and reference materials:`\n            : `User message: ${message}\n\nProvide a helpful response:`;\n        try {\n            return await this.generate(prompt, {\n                maxTokens: 512,\n                temperature: 0.7\n            });\n        }\n        catch (error) {\n            console.error('Chat generation failed:', error);\n            throw error;\n        }\n    }\n    async generateStreamFromChat(message, callback, context = '', referenceContext = '') {\n        const fullContext = context && referenceContext\n            ? `Document context: ${context}\\n\\nReference materials: ${referenceContext}`\n            : context\n                ? `Document context: ${context}`\n                : referenceContext\n                    ? `Reference materials: ${referenceContext}`\n                    : '';\n        const prompt = fullContext\n            ? `${fullContext}\n\nUser message: ${message}\n\nProvide a helpful response using the available context and reference materials:`\n            : `User message: ${message}\n\nProvide a helpful response:`;\n        try {\n            await this.streamGenerate(prompt, callback, {\n                maxTokens: 512,\n                temperature: 0.7\n            });\n        }\n        catch (error) {\n            console.error('Streaming chat generation failed:', error);\n            throw error;\n        }\n    }\n    async composeDocument(instruction, context = '', referenceContext = '') {\n        const fullContext = context && referenceContext\n            ? `Document context: ${context}\\n\\nReference materials: ${referenceContext}`\n            : context\n                ? `Document context: ${context}`\n                : referenceContext\n                    ? `Reference materials: ${referenceContext}`\n                    : '';\n        const prompt = fullContext\n            ? `${fullContext}\n\nInstruction: ${instruction}\n\nGenerate content based on the instruction, incorporating relevant information from the provided context and reference materials:`\n            : `Instruction: ${instruction}\n\nGenerate content based on the instruction:`;\n        try {\n            return await this.generate(prompt, {\n                maxTokens: 1024,\n                temperature: 0.6\n            });\n        }\n        catch (error) {\n            console.error('Document composition failed:', error);\n            throw error;\n        }\n    }\n    async streamComposeDocument(instruction, callback, context = '', referenceContext = '') {\n        const fullContext = context && referenceContext\n            ? `Document context: ${context}\\n\\nReference materials: ${referenceContext}`\n            : context\n                ? `Document context: ${context}`\n                : referenceContext\n                    ? `Reference materials: ${referenceContext}`\n                    : '';\n        const prompt = fullContext\n            ? `${fullContext}\n\nInstruction: ${instruction}\n\nGenerate content based on the instruction, incorporating relevant information from the provided context and reference materials:`\n            : `Instruction: ${instruction}\n\nGenerate content based on the instruction:`;\n        try {\n            await this.streamGenerate(prompt, callback, {\n                maxTokens: 1024,\n                temperature: 0.6\n            });\n        }\n        catch (error) {\n            console.error('Streaming document composition failed:', error);\n            throw error;\n        }\n    }\n    isReady() {\n        return this.isConnected;\n    }\n    getModelInfo() {\n        return {\n            name: this.modelName,\n            baseUrl: this.baseUrl,\n            connected: this.isConnected\n        };\n    }\n}\n","export class ChatInterface {\n    constructor(container, gemmaService, editor, referenceManager) {\n        this.messages = [];\n        this.messageIdCounter = 0;\n        this.isProcessing = false;\n        this.container = container;\n        this.gemmaService = gemmaService;\n        this.editor = editor;\n        this.referenceManager = referenceManager;\n        this.initializeElements();\n        this.setupEventListeners();\n        this.addWelcomeMessage();\n    }\n    initializeElements() {\n        this.messagesContainer = this.container.querySelector('#chat-messages');\n        this.inputElement = this.container.querySelector('#chat-input');\n        if (!this.messagesContainer || !this.inputElement) {\n            throw new Error('Chat interface elements not found');\n        }\n        // Add some styling improvements\n        this.messagesContainer.style.cssText += `\n      max-height: 400px;\n      overflow-y: auto;\n      scroll-behavior: smooth;\n    `;\n    }\n    setupEventListeners() {\n        // Handle Enter key in input\n        this.inputElement.addEventListener('keydown', (event) => {\n            if (event.key === 'Enter' && !event.shiftKey) {\n                event.preventDefault();\n                this.sendMessage();\n            }\n        });\n        // Handle input focus\n        this.inputElement.addEventListener('focus', () => {\n            this.inputElement.style.borderColor = '#2196f3';\n        });\n        this.inputElement.addEventListener('blur', () => {\n            this.inputElement.style.borderColor = '#ddd';\n        });\n    }\n    addWelcomeMessage() {\n        const welcomeMessage = {\n            id: `msg-${++this.messageIdCounter}`,\n            role: 'assistant',\n            content: 'Hello! I\\'m your AI assistant powered by Gemma3. I can help you with questions and guidance. For content generation, try:\\n\\n• **Inline suggestions**: Just type - gray suggestions appear automatically (press Tab to accept, Esc to dismiss)\\n• **Chat commands**: \"Write a paragraph about...\" (generates directly in editor)\\n• **AI command palette**: Ctrl+/ (or Cmd+/) to open quick AI commands\\n• **Reference documents**: Upload .txt/.md files below - I\\'ll use them as context for better responses\\n\\nWhat can I help you with?',\n            timestamp: new Date()\n        };\n        this.messages.push(welcomeMessage);\n        this.renderMessage(welcomeMessage);\n    }\n    async sendMessage() {\n        const content = this.inputElement.value.trim();\n        if (!content || this.isProcessing)\n            return;\n        // Clear input\n        this.inputElement.value = '';\n        this.isProcessing = true;\n        // Add user message\n        const userMessage = {\n            id: `msg-${++this.messageIdCounter}`,\n            role: 'user',\n            content,\n            timestamp: new Date()\n        };\n        this.messages.push(userMessage);\n        this.renderMessage(userMessage);\n        // Create assistant message placeholder\n        const assistantMessage = {\n            id: `msg-${++this.messageIdCounter}`,\n            role: 'assistant',\n            content: '',\n            timestamp: new Date(),\n            isStreaming: true\n        };\n        this.messages.push(assistantMessage);\n        const messageElement = this.renderMessage(assistantMessage);\n        try {\n            // Get document context and reference context\n            const context = this.getDocumentContext();\n            const referenceContext = this.getReferenceContext(content);\n            // Check if this is a composer command\n            if (this.isComposerCommand(content)) {\n                await this.handleComposerCommand(content, context, referenceContext, assistantMessage, messageElement);\n            }\n            else {\n                await this.handleChatMessage(content, context, referenceContext, assistantMessage, messageElement);\n            }\n        }\n        catch (error) {\n            console.error('Chat error:', error);\n            assistantMessage.content = 'Sorry, I encountered an error processing your message. Please try again.';\n            assistantMessage.isStreaming = false;\n            this.updateMessageElement(messageElement, assistantMessage);\n        }\n        finally {\n            this.isProcessing = false;\n        }\n    }\n    async handleChatMessage(content, context, referenceContext, assistantMessage, messageElement) {\n        let fullResponse = '';\n        await this.gemmaService.generateStreamFromChat(content, (chunk) => {\n            fullResponse += chunk;\n            assistantMessage.content = fullResponse;\n            this.updateMessageElement(messageElement, assistantMessage);\n            this.scrollToBottom();\n        }, context, referenceContext);\n        assistantMessage.isStreaming = false;\n        this.updateMessageElement(messageElement, assistantMessage);\n    }\n    async handleComposerCommand(content, context, referenceContext, assistantMessage, messageElement) {\n        const instruction = this.extractInstruction(content);\n        // Show what we're doing\n        const referencesInfo = referenceContext ? ' (using reference materials)' : '';\n        assistantMessage.content = `🎯 Generating content in your document${referencesInfo}...`;\n        assistantMessage.isStreaming = false;\n        this.updateMessageElement(messageElement, assistantMessage);\n        try {\n            // Generate content directly in the editor using streaming\n            await this.editor.streamAIContentIntoEditor(instruction);\n            // Update chat to show completion\n            assistantMessage.content = `✅ Content has been generated and inserted into your document!${referencesInfo ? '\\n\\n📚 Used reference materials for context.' : ''}`;\n            this.updateMessageElement(messageElement, assistantMessage);\n        }\n        catch (error) {\n            console.error('Content generation failed:', error);\n            assistantMessage.content = '❌ Failed to generate content. Please try again.';\n            this.updateMessageElement(messageElement, assistantMessage);\n        }\n    }\n    isComposerCommand(content) {\n        const composerKeywords = [\n            'write', 'generate', 'create', 'compose', 'draft', 'make',\n            'help me write', 'can you write', 'please write'\n        ];\n        const lowerContent = content.toLowerCase();\n        return composerKeywords.some(keyword => lowerContent.includes(keyword));\n    }\n    extractInstruction(content) {\n        // Remove common prefixes to get the core instruction\n        return content\n            .replace(/^(write|generate|create|compose|draft|make)\\s+/i, '')\n            .replace(/^(help me|can you|please)\\s+(write|generate|create|compose|draft|make)\\s+/i, '')\n            .trim();\n    }\n    renderMessage(message) {\n        const messageElement = document.createElement('div');\n        messageElement.className = `chat-message ${message.role}`;\n        messageElement.dataset.messageId = message.id;\n        messageElement.style.cssText = `\n      margin-bottom: 16px;\n      padding: 12px;\n      border-radius: 8px;\n      max-width: 85%;\n      word-wrap: break-word;\n      ${message.role === 'user'\n            ? 'background: #e3f2fd; margin-left: auto; text-align: right;'\n            : 'background: #f5f5f5; margin-right: auto;'}\n    `;\n        this.updateMessageElement(messageElement, message);\n        this.messagesContainer.appendChild(messageElement);\n        this.scrollToBottom();\n        return messageElement;\n    }\n    updateMessageElement(element, message) {\n        const contentElement = element.querySelector('.message-content') || (() => {\n            const content = document.createElement('div');\n            content.className = 'message-content';\n            content.style.cssText = 'line-height: 1.4; white-space: pre-wrap;';\n            element.appendChild(content);\n            return content;\n        })();\n        contentElement.textContent = message.content;\n        // Add streaming indicator\n        if (message.isStreaming) {\n            const indicator = element.querySelector('.streaming-indicator') || (() => {\n                const indicator = document.createElement('span');\n                indicator.className = 'streaming-indicator';\n                indicator.textContent = ' ●';\n                indicator.style.cssText = 'color: #2196f3; animation: pulse 1s infinite;';\n                element.appendChild(indicator);\n                return indicator;\n            })();\n        }\n        else {\n            const indicator = element.querySelector('.streaming-indicator');\n            if (indicator) {\n                indicator.remove();\n            }\n        }\n        // Add timestamp\n        const timestampElement = element.querySelector('.message-timestamp') || (() => {\n            const timestamp = document.createElement('div');\n            timestamp.className = 'message-timestamp';\n            timestamp.style.cssText = 'font-size: 11px; color: #666; margin-top: 4px; opacity: 0.7;';\n            element.appendChild(timestamp);\n            return timestamp;\n        })();\n        timestampElement.textContent = message.timestamp.toLocaleTimeString();\n    }\n    scrollToBottom() {\n        this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;\n    }\n    getDocumentContext() {\n        const blocks = this.editor.getBlocks();\n        return blocks.map(block => block.content).join('\\n').substring(0, 2000); // Limit context size\n    }\n    getReferenceContext(message) {\n        // Extract keywords from the user message and document context\n        const documentContext = this.getDocumentContext();\n        const allText = message + ' ' + documentContext;\n        const keywords = this.extractKeywords(allText);\n        // Get relevant reference content\n        return this.referenceManager.getRelevantContent(keywords, 1500);\n    }\n    extractKeywords(text) {\n        // Simple keyword extraction - split by words and filter meaningful ones\n        const words = text\n            .toLowerCase()\n            .replace(/[^\\w\\s]/g, ' ')\n            .split(/\\s+/)\n            .filter(word => word.length > 3) // Filter short words\n            .filter(word => !this.isStopWord(word));\n        // Return unique words, limited to avoid too much context\n        return [...new Set(words)].slice(0, 12);\n    }\n    isStopWord(word) {\n        const stopWords = new Set([\n            'this', 'that', 'with', 'have', 'will', 'from', 'they', 'been',\n            'were', 'said', 'each', 'which', 'their', 'time', 'about', 'there',\n            'could', 'other', 'more', 'very', 'what', 'know', 'just', 'first',\n            'into', 'over', 'think', 'also', 'your', 'work', 'life', 'only',\n            'new', 'would', 'come', 'its', 'after', 'way', 'who', 'may',\n            'say', 'great', 'where', 'much', 'should', 'well', 'large', 'use'\n        ]);\n        return stopWords.has(word);\n    }\n    showNotification(message) {\n        const notification = document.createElement('div');\n        notification.className = 'chat-notification';\n        notification.textContent = message;\n        notification.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: #4caf50;\n      color: white;\n      padding: 12px 20px;\n      border-radius: 4px;\n      font-size: 14px;\n      z-index: 1001;\n      animation: slideInRight 0.3s ease;\n    `;\n        document.body.appendChild(notification);\n        setTimeout(() => {\n            notification.style.animation = 'slideOutRight 0.3s ease';\n            setTimeout(() => {\n                notification.remove();\n            }, 300);\n        }, 3000);\n    }\n    clearMessages() {\n        this.messages = [];\n        this.messagesContainer.innerHTML = '';\n        this.addWelcomeMessage();\n    }\n    getMessages() {\n        return [...this.messages];\n    }\n    addSystemMessage(content) {\n        const message = {\n            id: `msg-${++this.messageIdCounter}`,\n            role: 'assistant',\n            content,\n            timestamp: new Date()\n        };\n        this.messages.push(message);\n        this.renderMessage(message);\n    }\n}\n","export class AutoSave {\n    constructor(editor, fileStorage, options = {}) {\n        this.saveTimer = null;\n        this.lastSaveTime = null;\n        this.hasUnsavedChanges = false;\n        this.isInitialized = false;\n        this.editor = editor;\n        this.fileStorage = fileStorage;\n        this.options = {\n            interval: 30000, // 30 seconds\n            filename: 'current.json',\n            enabled: true,\n            showStatus: true,\n            ...options\n        };\n        this.initialize();\n    }\n    initialize() {\n        if (this.isInitialized)\n            return;\n        // Listen for editor changes\n        window.addEventListener('editorChange', this.handleEditorChange.bind(this));\n        // Listen for page visibility changes to save before user leaves\n        document.addEventListener('visibilitychange', this.handleVisibilityChange.bind(this));\n        // Listen for beforeunload to save before page closes\n        window.addEventListener('beforeunload', this.handleBeforeUnload.bind(this));\n        // Start auto-save timer if enabled\n        if (this.options.enabled) {\n            this.startAutoSave();\n        }\n        this.isInitialized = true;\n        console.log('AutoSave initialized');\n    }\n    handleEditorChange() {\n        this.hasUnsavedChanges = true;\n        // Reset the auto-save timer\n        if (this.options.enabled) {\n            this.restartAutoSave();\n        }\n        // Update UI to show unsaved changes\n        if (this.options.showStatus) {\n            this.updateSaveStatus('unsaved');\n        }\n    }\n    handleVisibilityChange() {\n        if (document.hidden && this.hasUnsavedChanges) {\n            // Page is being hidden, save immediately\n            this.saveNow();\n        }\n    }\n    handleBeforeUnload(event) {\n        if (this.hasUnsavedChanges) {\n            // Save before page unloads\n            this.saveNow();\n            // Show warning to user\n            const message = 'You have unsaved changes. Are you sure you want to leave?';\n            event.returnValue = message;\n            return message;\n        }\n        return undefined;\n    }\n    startAutoSave() {\n        if (this.saveTimer) {\n            clearInterval(this.saveTimer);\n        }\n        this.saveTimer = setInterval(() => {\n            if (this.hasUnsavedChanges) {\n                this.saveNow();\n            }\n        }, this.options.interval);\n    }\n    restartAutoSave() {\n        if (this.options.enabled) {\n            this.startAutoSave();\n        }\n    }\n    async saveNow() {\n        if (!this.hasUnsavedChanges) {\n            return;\n        }\n        try {\n            if (this.options.showStatus) {\n                this.updateSaveStatus('saving');\n            }\n            const editorState = this.editor.getState();\n            await this.fileStorage.save(this.options.filename, editorState);\n            this.hasUnsavedChanges = false;\n            this.lastSaveTime = new Date();\n            if (this.options.showStatus) {\n                this.updateSaveStatus('saved');\n            }\n            console.log(`Auto-saved at ${this.lastSaveTime.toLocaleTimeString()}`);\n        }\n        catch (error) {\n            console.error('Auto-save failed:', error);\n            if (this.options.showStatus) {\n                this.updateSaveStatus('error');\n            }\n        }\n    }\n    enable() {\n        this.options.enabled = true;\n        this.startAutoSave();\n        console.log('Auto-save enabled');\n    }\n    disable() {\n        this.options.enabled = false;\n        if (this.saveTimer) {\n            clearInterval(this.saveTimer);\n            this.saveTimer = null;\n        }\n        console.log('Auto-save disabled');\n    }\n    setInterval(interval) {\n        this.options.interval = interval;\n        if (this.options.enabled) {\n            this.restartAutoSave();\n        }\n        console.log(`Auto-save interval set to ${interval}ms`);\n    }\n    setFilename(filename) {\n        this.options.filename = filename;\n        console.log(`Auto-save filename set to ${filename}`);\n    }\n    getStatus() {\n        return {\n            enabled: this.options.enabled,\n            interval: this.options.interval,\n            filename: this.options.filename,\n            lastSaveTime: this.lastSaveTime,\n            hasUnsavedChanges: this.hasUnsavedChanges\n        };\n    }\n    updateSaveStatus(status) {\n        // Remove existing status\n        const existingStatus = document.querySelector('.auto-save-status');\n        if (existingStatus) {\n            existingStatus.remove();\n        }\n        // Create status element\n        const statusEl = document.createElement('div');\n        statusEl.className = 'auto-save-status';\n        statusEl.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      left: 20px;\n      padding: 8px 16px;\n      border-radius: 4px;\n      font-size: 14px;\n      z-index: 1000;\n      transition: opacity 0.3s;\n    `;\n        switch (status) {\n            case 'saved':\n                statusEl.style.background = '#4caf50';\n                statusEl.style.color = 'white';\n                statusEl.textContent = `✓ Saved at ${new Date().toLocaleTimeString()}`;\n                break;\n            case 'saving':\n                statusEl.style.background = '#2196f3';\n                statusEl.style.color = 'white';\n                statusEl.textContent = '💾 Saving...';\n                break;\n            case 'unsaved':\n                statusEl.style.background = '#ff9800';\n                statusEl.style.color = 'white';\n                statusEl.textContent = '● Unsaved changes';\n                break;\n            case 'error':\n                statusEl.style.background = '#f44336';\n                statusEl.style.color = 'white';\n                statusEl.textContent = '❌ Save failed';\n                break;\n        }\n        document.body.appendChild(statusEl);\n        // Auto-hide success/error messages\n        if (status === 'saved' || status === 'error') {\n            setTimeout(() => {\n                statusEl.style.opacity = '0';\n                setTimeout(() => {\n                    statusEl.remove();\n                }, 300);\n            }, 3000);\n        }\n    }\n    destroy() {\n        // Clean up event listeners\n        window.removeEventListener('editorChange', this.handleEditorChange.bind(this));\n        document.removeEventListener('visibilitychange', this.handleVisibilityChange.bind(this));\n        window.removeEventListener('beforeunload', this.handleBeforeUnload.bind(this));\n        // Clear timer\n        if (this.saveTimer) {\n            clearInterval(this.saveTimer);\n            this.saveTimer = null;\n        }\n        // Save any unsaved changes before destroying\n        if (this.hasUnsavedChanges) {\n            this.saveNow();\n        }\n        this.isInitialized = false;\n        console.log('AutoSave destroyed');\n    }\n    // Manual save method for user-triggered saves\n    async manualSave(filename) {\n        const saveFilename = filename || this.options.filename;\n        try {\n            if (this.options.showStatus) {\n                this.updateSaveStatus('saving');\n            }\n            const editorState = this.editor.getState();\n            await this.fileStorage.save(saveFilename, editorState);\n            this.hasUnsavedChanges = false;\n            this.lastSaveTime = new Date();\n            if (this.options.showStatus) {\n                this.updateSaveStatus('saved');\n            }\n            console.log(`Manually saved to ${saveFilename} at ${this.lastSaveTime.toLocaleTimeString()}`);\n        }\n        catch (error) {\n            console.error('Manual save failed:', error);\n            if (this.options.showStatus) {\n                this.updateSaveStatus('error');\n            }\n            throw error;\n        }\n    }\n}\n","export class ReferenceManager {\n    constructor() {\n        this.STORAGE_KEY = 'gemma-notebook-references';\n        this.documents = [];\n        this.documentIdCounter = 0;\n        this.loadReferences();\n    }\n    async uploadFile(file) {\n        // Validate file type\n        if (!this.isValidFileType(file)) {\n            throw new Error('Invalid file type. Only .txt and .md files are supported.');\n        }\n        // Validate file size (max 1MB)\n        const maxSize = 1024 * 1024; // 1MB\n        if (file.size > maxSize) {\n            throw new Error('File too large. Maximum size is 1MB.');\n        }\n        try {\n            // Read file content\n            const content = await this.readFileContent(file);\n            // Create reference document\n            const document = {\n                id: `ref-${++this.documentIdCounter}`,\n                name: file.name,\n                content: content.trim(),\n                type: this.getFileType(file.name),\n                uploadedAt: new Date(),\n                size: file.size\n            };\n            // Add to documents list\n            this.documents.push(document);\n            // Save to storage\n            this.saveReferences();\n            return document;\n        }\n        catch (error) {\n            console.error('Failed to upload reference file:', error);\n            throw new Error(`Failed to upload file: ${file.name}`);\n        }\n    }\n    removeDocument(documentId) {\n        const index = this.documents.findIndex(doc => doc.id === documentId);\n        if (index !== -1) {\n            this.documents.splice(index, 1);\n            this.saveReferences();\n            return true;\n        }\n        return false;\n    }\n    getDocument(documentId) {\n        return this.documents.find(doc => doc.id === documentId);\n    }\n    getAllDocuments() {\n        return [...this.documents];\n    }\n    getDocumentsContent() {\n        if (this.documents.length === 0) {\n            return '';\n        }\n        const separator = '\\n\\n--- Reference Document ---\\n\\n';\n        return this.documents\n            .map(doc => `### ${doc.name}\\n\\n${doc.content}`)\n            .join(separator);\n    }\n    getDocumentsSummary() {\n        if (this.documents.length === 0) {\n            return 'No reference documents available.';\n        }\n        return `Reference documents available:\\n${this.documents\n            .map(doc => `- ${doc.name} (${doc.type}, ${this.formatFileSize(doc.size)})`)\n            .join('\\n')}`;\n    }\n    clearAllDocuments() {\n        this.documents = [];\n        this.saveReferences();\n    }\n    getStats() {\n        return {\n            totalDocuments: this.documents.length,\n            totalSize: this.documents.reduce((sum, doc) => sum + doc.size, 0),\n            types: {\n                text: this.documents.filter(doc => doc.type === 'text').length,\n                markdown: this.documents.filter(doc => doc.type === 'markdown').length\n            }\n        };\n    }\n    isValidFileType(file) {\n        const validExtensions = ['.txt', '.md', '.markdown'];\n        const fileName = file.name.toLowerCase();\n        return validExtensions.some(ext => fileName.endsWith(ext));\n    }\n    getFileType(fileName) {\n        const lowerName = fileName.toLowerCase();\n        if (lowerName.endsWith('.md') || lowerName.endsWith('.markdown')) {\n            return 'markdown';\n        }\n        return 'text';\n    }\n    async readFileContent(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = (event) => {\n                const content = event.target?.result;\n                resolve(content);\n            };\n            reader.onerror = () => {\n                reject(new Error('Failed to read file'));\n            };\n            reader.readAsText(file, 'UTF-8');\n        });\n    }\n    loadReferences() {\n        try {\n            const stored = localStorage.getItem(this.STORAGE_KEY);\n            if (stored) {\n                const data = JSON.parse(stored);\n                this.documents = data.documents.map(doc => ({\n                    ...doc,\n                    uploadedAt: new Date(doc.uploadedAt)\n                }));\n                // Update counter to avoid ID conflicts\n                this.documentIdCounter = Math.max(...this.documents.map(doc => parseInt(doc.id.split('-')[1]) || 0), 0);\n            }\n        }\n        catch (error) {\n            console.error('Failed to load references:', error);\n            this.documents = [];\n        }\n    }\n    saveReferences() {\n        try {\n            const data = {\n                documents: this.documents,\n                lastUpdated: new Date()\n            };\n            localStorage.setItem(this.STORAGE_KEY, JSON.stringify(data));\n        }\n        catch (error) {\n            console.error('Failed to save references:', error);\n            throw new Error('Failed to save reference documents');\n        }\n    }\n    formatFileSize(bytes) {\n        if (bytes === 0)\n            return '0 B';\n        const k = 1024;\n        const sizes = ['B', 'KB', 'MB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return `${parseFloat((bytes / Math.pow(k, i)).toFixed(1))} ${sizes[i]}`;\n    }\n    // Search within reference documents\n    searchReferences(query) {\n        const results = [];\n        const searchTerm = query.toLowerCase();\n        this.documents.forEach(doc => {\n            const lines = doc.content.split('\\n');\n            const matchingLines = [];\n            lines.forEach((line, index) => {\n                if (line.toLowerCase().includes(searchTerm)) {\n                    matchingLines.push({\n                        lineNumber: index + 1,\n                        content: line.trim()\n                    });\n                }\n            });\n            if (matchingLines.length > 0) {\n                results.push({ document: doc, matchingLines });\n            }\n        });\n        return results;\n    }\n    // Get context-relevant content from references\n    getRelevantContent(contextKeywords, maxLength = 2000) {\n        if (this.documents.length === 0)\n            return '';\n        // Simple relevance scoring based on keyword matches\n        const relevantSections = [];\n        this.documents.forEach(doc => {\n            const paragraphs = doc.content.split('\\n\\n').filter(p => p.trim());\n            paragraphs.forEach(paragraph => {\n                let score = 0;\n                const lowerParagraph = paragraph.toLowerCase();\n                contextKeywords.forEach(keyword => {\n                    const keywordLower = keyword.toLowerCase();\n                    const matches = (lowerParagraph.match(new RegExp(keywordLower, 'g')) || []).length;\n                    score += matches * keyword.length; // Weight longer keywords more\n                });\n                if (score > 0) {\n                    relevantSections.push({\n                        content: paragraph.trim(),\n                        score,\n                        source: doc.name\n                    });\n                }\n            });\n        });\n        // Sort by relevance and take top sections within length limit\n        relevantSections.sort((a, b) => b.score - a.score);\n        let result = '';\n        for (const section of relevantSections) {\n            const addition = `[From ${section.source}]\\n${section.content}\\n\\n`;\n            if (result.length + addition.length <= maxLength) {\n                result += addition;\n            }\n            else {\n                break;\n            }\n        }\n        return result.trim();\n    }\n}\n","export class ReferenceUI {\n    constructor(container, referenceManager) {\n        this.isExpanded = false;\n        this.container = container;\n        this.referenceManager = referenceManager;\n        this.createUI();\n        this.setupEventListeners();\n    }\n    createUI() {\n        const referencesSection = document.createElement('div');\n        referencesSection.className = 'references-section';\n        referencesSection.innerHTML = `\n      <div class=\"references-header\" style=\"\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        padding: 10px 0;\n        border-bottom: 1px solid #eee;\n        margin-bottom: 10px;\n        cursor: pointer;\n      \">\n        <h4 style=\"margin: 0; color: #333; font-size: 14px;\">\n          📚 References <span class=\"ref-count\">(0)</span>\n        </h4>\n        <span class=\"expand-icon\" style=\"\n          transform: rotate(0deg);\n          transition: transform 0.2s;\n          font-size: 12px;\n          color: #666;\n        \">▼</span>\n      </div>\n      \n      <div class=\"references-content\" style=\"\n        max-height: 0;\n        overflow: hidden;\n        transition: max-height 0.3s ease;\n      \">\n        <div class=\"upload-area\" style=\"\n          border: 2px dashed #ddd;\n          border-radius: 6px;\n          padding: 20px;\n          text-align: center;\n          margin-bottom: 15px;\n          cursor: pointer;\n          transition: all 0.2s;\n        \">\n          <div style=\"color: #666; font-size: 14px; margin-bottom: 8px;\">\n            📁 Drop files here or click to upload\n          </div>\n          <div style=\"color: #999; font-size: 12px;\">\n            Supports .txt and .md files (max 1MB each)\n          </div>\n          <input type=\"file\" multiple accept=\".txt,.md,.markdown\" style=\"display: none;\" class=\"file-input\">\n        </div>\n        \n        <div class=\"references-list\" style=\"\n          max-height: 200px;\n          overflow-y: auto;\n        \"></div>\n        \n        <div class=\"references-stats\" style=\"\n          font-size: 12px;\n          color: #666;\n          margin-top: 10px;\n          padding-top: 10px;\n          border-top: 1px solid #eee;\n        \"></div>\n      </div>\n    `;\n        this.container.appendChild(referencesSection);\n        this.updateUI();\n    }\n    setupEventListeners() {\n        // Toggle expand/collapse\n        const header = this.container.querySelector('.references-header');\n        header.addEventListener('click', () => {\n            this.toggleExpanded();\n        });\n        // File upload\n        const uploadArea = this.container.querySelector('.upload-area');\n        const fileInput = this.container.querySelector('.file-input');\n        uploadArea.addEventListener('click', () => {\n            fileInput.click();\n        });\n        uploadArea.addEventListener('dragover', (e) => {\n            e.preventDefault();\n            uploadArea.style.borderColor = '#2196f3';\n            uploadArea.style.backgroundColor = '#f8f9ff';\n        });\n        uploadArea.addEventListener('dragleave', () => {\n            uploadArea.style.borderColor = '#ddd';\n            uploadArea.style.backgroundColor = 'transparent';\n        });\n        uploadArea.addEventListener('drop', (e) => {\n            e.preventDefault();\n            uploadArea.style.borderColor = '#ddd';\n            uploadArea.style.backgroundColor = 'transparent';\n            const files = Array.from(e.dataTransfer?.files || []);\n            this.handleFileUpload(files);\n        });\n        fileInput.addEventListener('change', (e) => {\n            const files = Array.from(e.target.files || []);\n            this.handleFileUpload(files);\n        });\n    }\n    toggleExpanded() {\n        this.isExpanded = !this.isExpanded;\n        const content = this.container.querySelector('.references-content');\n        const icon = this.container.querySelector('.expand-icon');\n        if (this.isExpanded) {\n            content.style.maxHeight = '400px';\n            icon.style.transform = 'rotate(180deg)';\n        }\n        else {\n            content.style.maxHeight = '0';\n            icon.style.transform = 'rotate(0deg)';\n        }\n    }\n    async handleFileUpload(files) {\n        const uploadPromises = files.map(async (file) => {\n            try {\n                await this.referenceManager.uploadFile(file);\n                this.showNotification(`✅ Uploaded: ${file.name}`, 'success');\n            }\n            catch (error) {\n                console.error('Upload failed:', error);\n                this.showNotification(`❌ Failed: ${file.name} - ${error.message}`, 'error');\n            }\n        });\n        await Promise.all(uploadPromises);\n        this.updateUI();\n        // Expand if collapsed and files were uploaded\n        if (!this.isExpanded && files.length > 0) {\n            this.toggleExpanded();\n        }\n    }\n    updateUI() {\n        this.updateReferencesList();\n        this.updateStats();\n        this.updateCount();\n    }\n    updateReferencesList() {\n        const listContainer = this.container.querySelector('.references-list');\n        const documents = this.referenceManager.getAllDocuments();\n        if (documents.length === 0) {\n            listContainer.innerHTML = `\n        <div style=\"\n          text-align: center;\n          color: #999;\n          font-size: 13px;\n          padding: 20px;\n        \">\n          No reference documents uploaded yet\n        </div>\n      `;\n            return;\n        }\n        listContainer.innerHTML = documents\n            .map(doc => this.createDocumentElement(doc))\n            .join('');\n        // Add event listeners for remove buttons\n        listContainer.querySelectorAll('.remove-btn').forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                e.stopPropagation();\n                const docId = btn.dataset.docId;\n                if (docId) {\n                    this.removeDocument(docId);\n                }\n            });\n        });\n        // Add event listeners for document items\n        listContainer.querySelectorAll('.reference-item').forEach(item => {\n            item.addEventListener('click', () => {\n                const docId = item.dataset.docId;\n                if (docId) {\n                    this.showDocumentPreview(docId);\n                }\n            });\n        });\n    }\n    createDocumentElement(doc) {\n        const icon = doc.type === 'markdown' ? '📝' : '📄';\n        const truncatedContent = doc.content.length > 100\n            ? doc.content.substring(0, 100) + '...'\n            : doc.content;\n        return `\n      <div class=\"reference-item\" data-doc-id=\"${doc.id}\" style=\"\n        padding: 8px;\n        margin-bottom: 6px;\n        background: #f8f9fa;\n        border-radius: 4px;\n        cursor: pointer;\n        position: relative;\n        transition: background-color 0.2s;\n      \" onmouseover=\"this.style.backgroundColor='#f0f0f0'\" \n         onmouseout=\"this.style.backgroundColor='#f8f9fa'\">\n        <div style=\"display: flex; align-items: center; justify-content: space-between;\">\n          <div style=\"flex: 1; min-width: 0;\">\n            <div style=\"\n              font-size: 13px;\n              font-weight: 500;\n              color: #333;\n              margin-bottom: 2px;\n              display: flex;\n              align-items: center;\n              gap: 6px;\n            \">\n              <span>${icon}</span>\n              <span style=\"white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\">\n                ${doc.name}\n              </span>\n            </div>\n            <div style=\"\n              font-size: 11px;\n              color: #666;\n              white-space: nowrap;\n              overflow: hidden;\n              text-overflow: ellipsis;\n            \">\n              ${truncatedContent}\n            </div>\n          </div>\n          <button class=\"remove-btn\" data-doc-id=\"${doc.id}\" style=\"\n            background: #ff4444;\n            color: white;\n            border: none;\n            border-radius: 3px;\n            padding: 2px 6px;\n            font-size: 10px;\n            cursor: pointer;\n            margin-left: 8px;\n            opacity: 0.7;\n          \" onmouseover=\"this.style.opacity='1'\" \n             onmouseout=\"this.style.opacity='0.7'\">×</button>\n        </div>\n      </div>\n    `;\n    }\n    updateStats() {\n        const statsContainer = this.container.querySelector('.references-stats');\n        const stats = this.referenceManager.getStats();\n        if (stats.totalDocuments === 0) {\n            statsContainer.innerHTML = '';\n            return;\n        }\n        const sizeFormatted = this.formatFileSize(stats.totalSize);\n        statsContainer.innerHTML = `\n      📊 ${stats.totalDocuments} document${stats.totalDocuments > 1 ? 's' : ''} \n      • ${sizeFormatted} total\n      ${stats.types.markdown > 0 ? `• ${stats.types.markdown} markdown` : ''}\n      ${stats.types.text > 0 ? `• ${stats.types.text} text` : ''}\n    `;\n    }\n    updateCount() {\n        const countElement = this.container.querySelector('.ref-count');\n        const count = this.referenceManager.getAllDocuments().length;\n        countElement.textContent = `(${count})`;\n    }\n    removeDocument(docId) {\n        const doc = this.referenceManager.getDocument(docId);\n        if (doc && confirm(`Remove \"${doc.name}\" from references?`)) {\n            this.referenceManager.removeDocument(docId);\n            this.updateUI();\n            this.showNotification(`🗑️ Removed: ${doc.name}`, 'info');\n        }\n    }\n    showDocumentPreview(docId) {\n        const doc = this.referenceManager.getDocument(docId);\n        if (!doc)\n            return;\n        const modal = document.createElement('div');\n        modal.className = 'document-preview-modal';\n        modal.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: rgba(0,0,0,0.5);\n      z-index: 2000;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      padding: 20px;\n    `;\n        const content = document.createElement('div');\n        content.style.cssText = `\n      background: white;\n      border-radius: 8px;\n      padding: 20px;\n      max-width: 600px;\n      max-height: 80vh;\n      overflow: auto;\n      position: relative;\n    `;\n        content.innerHTML = `\n      <div style=\"\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        margin-bottom: 15px;\n        padding-bottom: 10px;\n        border-bottom: 1px solid #eee;\n      \">\n        <h3 style=\"margin: 0; color: #333;\">\n          ${doc.type === 'markdown' ? '📝' : '📄'} ${doc.name}\n        </h3>\n        <button class=\"close-btn\" style=\"\n          background: none;\n          border: none;\n          font-size: 20px;\n          cursor: pointer;\n          color: #666;\n          padding: 5px;\n        \">×</button>\n      </div>\n      <div style=\"\n        font-size: 12px;\n        color: #666;\n        margin-bottom: 15px;\n      \">\n        Uploaded: ${doc.uploadedAt.toLocaleDateString()} • \n        Size: ${this.formatFileSize(doc.size)} • \n        Type: ${doc.type}\n      </div>\n      <pre style=\"\n        white-space: pre-wrap;\n        font-family: inherit;\n        font-size: 14px;\n        line-height: 1.5;\n        color: #333;\n        margin: 0;\n        background: #f8f9fa;\n        padding: 15px;\n        border-radius: 4px;\n        max-height: 400px;\n        overflow-y: auto;\n      \">${doc.content}</pre>\n    `;\n        modal.appendChild(content);\n        document.body.appendChild(modal);\n        // Close handlers\n        const closeModal = () => modal.remove();\n        content.querySelector('.close-btn')?.addEventListener('click', closeModal);\n        modal.addEventListener('click', (e) => {\n            if (e.target === modal)\n                closeModal();\n        });\n    }\n    showNotification(message, type) {\n        const notification = document.createElement('div');\n        notification.textContent = message;\n        notification.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      padding: 10px 15px;\n      border-radius: 4px;\n      font-size: 13px;\n      z-index: 1001;\n      max-width: 300px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n      ${type === 'success' ? 'background: #4caf50; color: white;' : ''}\n      ${type === 'error' ? 'background: #f44336; color: white;' : ''}\n      ${type === 'info' ? 'background: #2196f3; color: white;' : ''}\n    `;\n        document.body.appendChild(notification);\n        setTimeout(() => {\n            notification.style.opacity = '0';\n            notification.style.transform = 'translateX(100%)';\n            setTimeout(() => notification.remove(), 300);\n        }, 3000);\n    }\n    formatFileSize(bytes) {\n        if (bytes === 0)\n            return '0 B';\n        const k = 1024;\n        const sizes = ['B', 'KB', 'MB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return `${parseFloat((bytes / Math.pow(k, i)).toFixed(1))} ${sizes[i]}`;\n    }\n    refresh() {\n        this.updateUI();\n    }\n    expandSection() {\n        if (!this.isExpanded) {\n            this.toggleExpanded();\n        }\n    }\n    getReferencesCount() {\n        return this.referenceManager.getAllDocuments().length;\n    }\n}\n","import { Editor } from '@/editor/Editor';\nimport { FileStorage } from '@/storage/FileStorage';\nimport { GemmaService } from '@/ai/GemmaService';\nimport { ChatInterface } from '@/chat/ChatInterface';\nimport { AutoSave } from '@/features/AutoSave';\nimport { ReferenceManager } from '@/references/ReferenceManager';\nimport { ReferenceUI } from '@/references/ReferenceUI';\nclass App {\n    constructor() {\n        this.initializeApp();\n    }\n    async initializeApp() {\n        try {\n            // Initialize core services\n            this.fileStorage = new FileStorage();\n            this.gemmaService = new GemmaService();\n            this.referenceManager = new ReferenceManager();\n            // Initialize editor\n            const editorContainer = document.querySelector('.editor-container');\n            this.editor = new Editor(editorContainer, this.gemmaService, this.referenceManager);\n            // Initialize chat interface\n            const chatContainer = document.querySelector('.chat-container');\n            this.chatInterface = new ChatInterface(chatContainer, this.gemmaService, this.editor, this.referenceManager);\n            // Initialize reference UI\n            const referenceContainer = document.getElementById('reference-container');\n            this.referenceUI = new ReferenceUI(referenceContainer, this.referenceManager);\n            // Initialize auto-save\n            this.autoSave = new AutoSave(this.editor, this.fileStorage);\n            // Connect services\n            await this.gemmaService.initialize();\n            // Load existing document if available\n            await this.loadDocument();\n            this.showStatus('App initialized successfully', 'success');\n        }\n        catch (error) {\n            console.error('Failed to initialize app:', error);\n            this.showStatus('Failed to initialize app', 'error');\n        }\n    }\n    async loadDocument() {\n        try {\n            const content = await this.fileStorage.load('current.json');\n            if (content) {\n                this.editor.loadContent(content);\n            }\n        }\n        catch (error) {\n            console.warn('No existing document found, starting with empty editor');\n        }\n    }\n    showStatus(message, type = 'success') {\n        const existing = document.querySelector('.status');\n        if (existing) {\n            existing.remove();\n        }\n        const status = document.createElement('div');\n        status.className = `status ${type}`;\n        status.textContent = message;\n        document.body.appendChild(status);\n        setTimeout(() => {\n            status.remove();\n        }, 3000);\n    }\n}\n// Initialize app when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Create app structure\n    const appDiv = document.getElementById('app');\n    if (appDiv) {\n        appDiv.innerHTML = `\n      <div class=\"app\">\n        <div class=\"editor-container\">\n          <div class=\"editor\" id=\"editor\"></div>\n        </div>\n        <div class=\"sidebar\">\n          <div class=\"reference-section\">\n            <h3>📚 Reference Documents</h3>\n            <div class=\"reference-container\" id=\"reference-container\">\n              <!-- Reference UI will be inserted here -->\n            </div>\n          </div>\n          <div class=\"chat-section\">\n            <h3>🤖 AI Chat</h3>\n            <div class=\"chat-container\">\n              <div class=\"chat-messages\" id=\"chat-messages\"></div>\n              <div class=\"chat-input\">\n                <input type=\"text\" id=\"chat-input\" placeholder=\"Ask AI anything...\">\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"ai-help\" title=\"AI Features:&#10;• Type to get inline suggestions (Tab to accept)&#10;• Press Ctrl+/ for AI command palette&#10;• Chat with AI in the sidebar&#10;• Upload reference documents for context\">\n        🤖 AI Helper\n      </div>\n    `;\n    }\n    // Initialize the app\n    new App();\n});\n"],"names":["BlockFactory","createBlock","id","type","content","metadata","now","Date","this","getDefaultMetadata","createdAt","updatedAt","level","language","number","checked","src","alt","width","caption","isTextBlock","includes","isListBlock","isHeadingBlock","startsWith","getHeadingLevel","parseInt","split","BlockRenderer","render","block","blockElement","document","createElement","className","dataset","blockId","blockType","draggable","topIndicator","appendChild","bottomIndicator","menu","createBlockMenu","typeIndicator","textContent","getBlockTypeLabel","dragHandle","innerHTML","title","contentElement","createContentElement","addButton","createParagraphElement","createHeadingElement","createQuoteElement","createCodeElement","createBulletListElement","createNumberedListElement","createChecklistElement","createHorizontalRuleElement","createImageElement","element","contentEditable","setAttribute","wrapper","languageSelect","style","cssText","forEach","lang","option","value","selected","codeElement","code","addEventListener","marker","checkbox","textDecoration","color","hr","imageContainer","img","resizeHandle","setupImageResize","uploadArea","fileInput","accept","display","setupImageUpload","handleFile","file","alert","reader","FileReader","onload","e","result","target","name","event","CustomEvent","detail","imageData","window","dispatchEvent","readAsDataURL","click","files","preventDefault","classList","add","remove","dataTransfer","length","isResizing","startX","startWidth","clientX","offsetWidth","body","cursor","userSelect","deltaX","newWidth","Math","max","min","applyTextFormatting","formattedContent","replace","InlineSuggestion","constructor","gemmaService","referenceManager","currentSuggestion","suggestionTimeout","isGenerating","SUGGESTION_DELAY","requestSuggestion","currentText","documentContext","clearSuggestion","clearTimeout","trim","setTimeout","async","generateSuggestion","contextKeywords","extractKeywords","referenceContext","getRelevantContent","suggestion","generateCompletion","cleanSuggestion","showInlineSuggestion","error","console","rawSuggestion","substring","words","slice","join","originalText","suggestionElement","createSuggestionElement","querySelector","positionSuggestionElement","isActive","opacity","requestAnimationFrame","transition","selection","getSelection","rangeCount","rect","getRangeAt","getBoundingClientRect","left","top","acceptSuggestion","newText","hasSuggestion","getCurrentSuggestion","updateSuggestionPosition","isSuggestionValid","destroy","text","toLowerCase","filter","word","isStopWord","Set","has","DragAndDrop","editor","editorElement","draggedElement","draggedBlockId","isDragging","startY","setupEventListeners","handleMouseDown","bind","handleMouseMove","handleMouseUp","closest","stopPropagation","clientY","deltaY","abs","hoveredElement","getBlockElementUnderCursor","clearDragOverClasses","midPoint","height","cleanup","targetElement","targetBlockId","insertAbove","moveBlock","x","y","originalDisplay","elementUnder","elementFromPoint","undefined","querySelectorAll","blocks","getBlocks","draggedIndex","findIndex","b","targetIndex","newIndex","Editor","container","currentBlockId","blockIdCounter","blockFactory","blockRenderer","inlineSuggestion","initializeEditor","setupSuggestionHandlers","dragAndDrop","addBlock","handleKeyDown","handleInput","handleClick","setupGlobalImageDragDrop","customEvent","updateBlock","focusBlock","getBlockById","updateBlockElement","types","contains","relatedTarget","imageFiles","Array","from","dropPosition","getDropPosition","startIndex","emptyImageBlock","findEmptyImageBlockNear","index","insertIndex","i","start","end","key","handleEnterKey","shiftKey","handleBackspaceKey","handleArrowKey","handleTab","ctrlKey","metaKey","showAICommandPalette","inputEvent","newContent","handleMarkdownShortcuts","inputType","data","context","getDocumentContext","notifyChange","setCurrentBlock","execCommand","range","beforeCursor","startContainer","startOffset","afterCursor","currentBlockIndex","newBlockId","blockIndex","removeBlock","prevBlock","direction","log","headingMatch","match","numberedMatch","splice","push","renderBlock","updates","Object","assign","currentIndex","rerenderEditor","children","insertBefore","newElement","replaceWith","find","position","focus","createRange","selectNodeContents","collapse","setStart","removeAllRanges","addRange","map","getReferenceContext","instruction","allText","keywords","getState","loadContent","state","showAutoCompletionNotification","message","notification","animation","parentNode","insertAIGeneratedContent","insertAtCurrentBlock","loadingBlockId","generatedContent","composeDocument","insertGeneratedContentAsBlocks","lines","line","trimmedLine","blockContent","streamAIContentIntoEditor","streamingBlockId","accumulatedContent","streamComposeDocument","chunk","scrollIntoView","behavior","palette","input","placeholder","buttonsContainer","generateButton","cancelButton","handleGenerate","removeChild","handleCancel","FileStorage","storageKey","metadataKey","save","filename","serializedContent","JSON","stringify","storageData","getStorageData","localStorage","setItem","updateMetadata","Error","load","parse","removeMetadata","exists","list","getMetadata","values","sort","a","getTime","format","convertToMarkdown","convertToText","import","convertFromMarkdown","convertFromText","getItem","size","path","markdown","checklistMatch","paragraphs","p","paragraph","createBackup","backupFilename","toISOString","getStorageStats","totalFiles","keys","totalSize","usage","toFixed","GemmaService","isConnected","baseUrl","modelName","initialize","response","fetch","ok","status","json","models","some","model","warn","m","generate","prompt","options","method","headers","stream","num_predict","maxTokens","temperature","top_p","topP","stop","stopSequences","streamGenerate","callback","getReader","decoder","TextDecoder","done","read","decode","cleanedCompletion","generateFromChat","fullContext","generateStreamFromChat","isReady","getModelInfo","connected","ChatInterface","messages","messageIdCounter","isProcessing","initializeElements","addWelcomeMessage","messagesContainer","inputElement","sendMessage","borderColor","welcomeMessage","role","timestamp","renderMessage","userMessage","assistantMessage","isStreaming","messageElement","isComposerCommand","handleComposerCommand","handleChatMessage","updateMessageElement","fullResponse","scrollToBottom","extractInstruction","referencesInfo","lowerContent","keyword","messageId","indicator","toLocaleTimeString","scrollTop","scrollHeight","showNotification","clearMessages","getMessages","addSystemMessage","AutoSave","fileStorage","saveTimer","lastSaveTime","hasUnsavedChanges","isInitialized","interval","enabled","showStatus","handleEditorChange","handleVisibilityChange","handleBeforeUnload","startAutoSave","restartAutoSave","updateSaveStatus","hidden","saveNow","returnValue","clearInterval","setInterval","editorState","enable","disable","setFilename","getStatus","existingStatus","statusEl","background","removeEventListener","manualSave","saveFilename","ReferenceManager","STORAGE_KEY","documents","documentIdCounter","loadReferences","uploadFile","isValidFileType","readFileContent","getFileType","uploadedAt","saveReferences","removeDocument","documentId","doc","getDocument","getAllDocuments","getDocumentsContent","getDocumentsSummary","formatFileSize","clearAllDocuments","getStats","totalDocuments","reduce","sum","fileName","ext","endsWith","lowerName","Promise","resolve","reject","onerror","readAsText","stored","lastUpdated","bytes","floor","parseFloat","pow","searchReferences","query","results","searchTerm","matchingLines","lineNumber","maxLength","relevantSections","score","lowerParagraph","keywordLower","matches","RegExp","source","section","addition","ReferenceUI","isExpanded","createUI","referencesSection","updateUI","toggleExpanded","backgroundColor","handleFileUpload","icon","maxHeight","transform","uploadPromises","all","updateReferencesList","updateStats","updateCount","listContainer","createDocumentElement","btn","docId","item","showDocumentPreview","truncatedContent","statsContainer","stats","sizeFormatted","countElement","count","confirm","modal","toLocaleDateString","closeModal","refresh","expandSection","getReferencesCount","App","initializeApp","editorContainer","chatContainer","chatInterface","referenceContainer","getElementById","referenceUI","autoSave","loadDocument","existing","appDiv"],"sourceRoot":""}