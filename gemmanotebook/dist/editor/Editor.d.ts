import { Block, BlockType, EditorState } from './types';
import { GemmaService } from '@/ai/GemmaService';
import { ReferenceManager } from '@/references/ReferenceManager';
export declare class Editor {
    private container;
    private editorElement;
    private blocks;
    private currentBlockId;
    private blockIdCounter;
    private gemmaService;
    private blockFactory;
    private blockRenderer;
    private inlineSuggestion;
    private referenceManager;
    private dragAndDrop;
    constructor(container: HTMLElement, gemmaService: GemmaService, referenceManager: ReferenceManager);
    private initializeEditor;
    private setupEventListeners;
    private setupSuggestionHandlers;
    private setupGlobalImageDragDrop;
    private getDropPosition;
    private findEmptyImageBlockNear;
    private handleKeyDown;
    private handleInput;
    private handleClick;
    private handleEnterKey;
    private handleBackspaceKey;
    private handleArrowKey;
    private handleTab;
    private handleMarkdownShortcuts;
    addBlock(type: BlockType, content?: string, index?: number): string;
    removeBlock(blockId: string): void;
    updateBlock(blockId: string, updates: Partial<Block>): void;
    moveBlock(blockId: string, newIndex: number): void;
    private renderBlock;
    private updateBlockElement;
    private rerenderEditor;
    private getBlockById;
    private setCurrentBlock;
    private focusBlock;
    private getDocumentContext;
    private getReferenceContext;
    private extractKeywords;
    private isStopWord;
    private notifyChange;
    getState(): EditorState;
    loadContent(state: EditorState): void;
    getBlocks(): Block[];
    private showAutoCompletionNotification;
    insertAIGeneratedContent(instruction: string, insertAtCurrentBlock?: boolean): Promise<void>;
    private insertGeneratedContentAsBlocks;
    streamAIContentIntoEditor(instruction: string): Promise<void>;
    private showAICommandPalette;
    destroy(): void;
}
